const examData = {
  tickets: [
    {
      id: 1,
      questions: [
        {
          question: "Ознаки продуктивності програмного забезпечення",
          answer: `<h4>1. Ознаки продуктивності програмного забезпечення</h2>
          <p>
          Продуктивність програмного забезпечення характеризується кількома ключовими ознаками, які визначають його ефективність та успішність. Основними показниками є швидкодія виконання програмних операцій, оптимальне використання системних ресурсів та масштабованість системи при збільшенні навантаження. Також важливими ознаками є надійність роботи, стабільність функціонування та здатність обробляти помилки без втрати даних і продуктивності. Особливу роль відіграє ефективність алгоритмів та оптимізація програмного коду, що безпосередньо впливає на швидкість роботи програми. Крім того, важливими є такі характеристики як зручність супроводу, можливість легкого масштабування та оновлення системи. Усі ці ознаки в комплексі визначають загальну продуктивність програмного забезпечення та його відповідність поставленим вимогам.
          </p>`,
        },
        {
          question:
            'Вирахування значень змінних на стадії компіляції (константа "згортання"). Вирахування значень функцій на стадіях компіляції ("згортка" функцій)',
          answer: `<h4>2. Вирахування значень змінних і функцій на стадії компіляції</h4>
            <p>
            Вирахування значень змінних і функцій на стадії компіляції, також відоме як "константне згортання" та "згортка функцій", є важливими методами оптимізації програмного коду. Ці техніки дозволяють зменшити кількість обчислень під час виконання програми шляхом попереднього обчислення значень на етапі компіляції.
            </p>
            <p>Основні переваги цих методів включають:</p>
            <ul>
              <li>Підвищення швидкодії програми за рахунок зменшення кількості операцій під час виконання</li>
              <li>Зменшення розміру виконуваного коду</li>
              <li>Оптимізація використання пам'яті</li>
              <li>Спрощення подальшої оптимізації коду</li>
            </ul>
            <p>
            Компілятор автоматично визначає вирази та функції, значення яких можна обчислити під час компіляції, і замінює їх на готові результати. Це особливо ефективно для математичних обчислень, операцій з константами та простих функцій. У підсумку, застосування цих методів оптимізації дозволяє створювати більш ефективний та продуктивний програмний код.
            </p>`,
        },
        {
          question: "Оптимізація передачі аргументів",
          answer: `<h4>3. Оптимізація передачі аргументів</h4>
                    <p>
                    Оптимізація передачі аргументів є важливим аспектом підвищення продуктивності програмного забезпечення, особливо в системах з інтенсивним викликом функцій. Цей процес включає в себе різні техніки та підходи для ефективної передачі даних між функціями та методами програми.
                    </p>
                    <p>Основні методи оптимізації передачі аргументів включають:</p>
                    <ul>
                      <li>Використання посилань замість копіювання великих об'єктів</li>
                      <li>Застосування константних параметрів для запобігання небажаних змін</li>
                      <li>Оптимізація порядку параметрів для кращого вирівнювання в пам'яті</li>
                      <li>Мінімізація кількості параметрів, що передаються</li>
                    </ul>
                    <p>
                    Правильна оптимізація передачі аргументів може значно покращити продуктивність програми, зменшити використання пам'яті та прискорити виконання функцій. Це особливо важливо для систем реального часу та високонавантажених додатків, де ефективність передачі даних між компонентами програми відіграє критичну роль.
                    </p>`,
        },
      ],
    },
    {
      id: 2,
      questions: [
        {
          question: "Надійність програмних систем",
          answer: `<h4>1. Надійність програмних систем</h4>
          <p>
          Надійність програмних систем є одним з ключових показників якості програмного забезпечення, що визначає здатність системи зберігати працездатність та виконувати задані функції протягом певного періоду часу. Це комплексна характеристика, яка включає в себе декілька важливих аспектів функціонування програмного забезпечення.
          </p>
          <p>Основні складові надійності програмних систем включають:</p>
          <ul>
            <li>Безвідмовність роботи системи</li>
            <li>Відмовостійкість та здатність до відновлення</li>
            <li>Цілісність даних та захист від пошкоджень</li>
            <li>Здатність обробляти помилки та виключні ситуації</li>
          </ul>
          <p>
          Для забезпечення надійності використовуються різні методи та підходи, включаючи тестування, моніторинг, резервне копіювання та системи відновлення даних. Важливим аспектом є також документування системи та наявність чітких процедур обслуговування. В сучасних умовах надійність програмних систем стає все більш критичним фактором, особливо для систем, що працюють з важливими даними або керують критичними процесами.
          </p>`,
        },
        {
          question: "Оптимізація алгебраїчних виразів",
          answer: `<h4>2. Оптимізація алгебраїчних виразів</h4>
          <p>
          Оптимізація алгебраїчних виразів є важливою складовою підвищення ефективності програмного коду, що дозволяє зменшити кількість операцій та покращити швидкодію програми. Цей процес включає різноманітні методи спрощення та перетворення математичних виразів з метою їх оптимального обчислення.
          </p>
          <p>Основні методи оптимізації алгебраїчних виразів включають:</p>
          <ul>
            <li>Згортання константних виразів</li>
            <li>Спрощення алгебраїчних операцій</li>
            <li>Видалення надлишкових обчислень</li>
            <li>Перегрупування операцій для ефективнішого виконання</li>
          </ul>
          <p>
          Застосування цих методів оптимізації дозволяє не тільки прискорити виконання програми, але й зменшити використання обчислювальних ресурсів. Особливо важливим є оптимізація алгебраїчних виразів у критичних ділянках коду та в циклах, де навіть незначне поліпшення може дати суттєвий приріст продуктивності. В результаті оптимізації досягається більш ефективне використання процесорного часу та покращення загальної продуктивності програми.
          </p>`,
        },
        {
          question: "Оптимізація функцій. Оптимізація розподілу змінних",
          answer: ``,
        },
      ],
    },
    {
      id: 3,
      questions: [
        {
          question:
            "Програмні та організаційні заходи для визначення продуктивності ПЗ",
          answer: ``,
        },
        {
          question: "Видалення невикористовуваних змінних",
          answer: ``,
        },
        {
          question: "Оптимізація ініціалізації рядків",
          answer: ``,
        },
      ],
    },
    {
      id: 4,
      questions: [
        {
          question:
            "Процеси розробки, їх закони, правила та умови проектування",
          answer: ``,
        },
        {
          question: "Видалення копій змінних",
          answer: ``,
        },
        {
          question: 'Оптимізація "мертвого" коду. Оптимізація константних умов',
          answer: ``,
        },
      ],
    },
    {
      id: 5,
      questions: [
        {
          question: "Організація та оптимізація даних",
          answer: ``,
        },
        {
          question: "Видалення невикористовуваних присвоювань",
          answer: ``,
        },
        {
          question: "Організація та оптимізація даних у СКБД",
          answer: ``,
        },
      ],
    },
    {
      id: 6,
      questions: [
        {
          question: "Організація та оптимізація програмного коду",
          answer: ``,
        },
        {
          question: "Видалення зайвих виразів",
          answer: ``,
        },
        {
          question: "Старіння процедурного кешу",
          answer: ``,
        },
      ],
    },
    {
      id: 7,
      questions: [
        {
          question: "Організація та оптимізація алгоритмів",
          answer: ``,
        },
        {
          question: "Видалення зайвих викликів функцій",
          answer: ``,
        },
        {
          question: "Неоптимальні індекси",
          answer: ``,
        },
      ],
    },
    {
      id: 8,
      questions: [
        {
          question: "Аналіз знань та алгоритмів",
          answer: ``,
        },
        {
          question: "Виконання алгебраїчних спрощень",
          answer: ``,
        },
        {
          question: "Неоптимальні статистики",
          answer: ``,
        },
      ],
    },
    {
      id: 9,
      questions: [
        {
          question: "Вимоги до проектів",
          answer: ``,
        },
        {
          question: "Основні методи оптимізації",
          answer: ``,
        },
        {
          question: "Організація та оптимізація даних у СКБД",
          answer: ``,
        },
      ],
    },
    {
      id: 10,
      questions: [
        {
          question: "Специфікації завдань",
          answer: ``,
        },
        {
          question: "Оптимізація підвиразів",
          answer: ``,
        },
        {
          question: "Оптимальне конструювання модулів програмних систем",
          answer: ``,
        },
      ],
    },
    {
      id: 11,
      questions: [
        {
          question: "Типи архітектур",
          answer: ``,
        },
        {
          question: "Оптимізація арифметичних операцій",
          answer: ``,
        },
        {
          question: "Критерії оцінки якості машинної оптимізації",
          answer: ``,
        },
      ],
    },
    {
      id: 12,
      questions: [
        {
          question: "Типи кодування",
          answer: ``,
        },
        {
          question: "Оптимізація розгалужень",
          answer: ``,
        },
        {
          question: "Методики оцінки якості машинної оптимізації",
          answer: ``,
        },
      ],
    },
    {
      id: 13,
      questions: [
        {
          question: "Мови, типи платформ, кросплатформеність",
          answer: ``,
        },
        {
          question: "Заміна переходів арифметичних операцій",
          answer: ``,
        },
        {
          question: "Неоптимальні індекси",
          answer: ``,
        },
      ],
    },
    {
      id: 14,
      questions: [
        {
          question: "Оточення середовище програмування і проектування",
          answer: ``,
        },
        {
          question: "Видалення зайвих умов",
          answer: ``,
        },
        {
          question: "Старіння процедурного кешу",
          answer: ``,
        },
      ],
    },
    {
      id: 15,
      questions: [
        {
          question: "Частота оновлення",
          answer: ``,
        },
        {
          question: "Видалення завідомо хибних умов",
          answer: ``,
        },
        {
          question: "Організація та оптимізація даних у СКБД",
          answer: ``,
        },
      ],
    },
    {
      id: 16,
      questions: [
        {
          question: "Частота фіксації помилок",
          answer: ``,
        },
        {
          question: "Оптимізація switch",
          answer: ``,
        },
        {
          question: 'Оптимізація "мертвого" коду. Оптимізація константних умов',
          answer: ``,
        },
      ],
    },
    {
      id: 17,
      questions: [
        {
          question: "Фактори процесу проектування програмного продукту",
          answer: ``,
        },
        {
          question: "Оптимізація switch",
          answer: ``,
        },
        {
          question: "Оптимізація ініціалізації рядків",
          answer: ``,
        },
      ],
    },
    {
      id: 18,
      questions: [
        {
          question: "Продуктивність у суміжних областях ІТ",
          answer: ``,
        },
        {
          question: "Створення таблиць переходів",
          answer: ``,
        },
        {
          question: "Оптимізація функцій. Оптимізація розподілу змінних",
          answer: ``,
        },
      ],
    },
    {
      id: 19,
      questions: [
        {
          question: "Оптимізація постійних виразів",
          answer: ``,
        },
        {
          question: "Оптимізація циклів",
          answer: ``,
        },
        {
          question: "Оптимізація передачі аргументів",
          answer: ``,
        },
      ],
    },
    {
      id: 20,
      questions: [
        {
          question:
            'Заміна перемінних константними значень ("розмноження" констант)',
          answer: ``,
        },
        {
          question: "Оптимізація викликів функцій",
          answer: ``,
        },
        {
          question: "Методики оцінки якості машинної оптимізації",
          answer: ``,
        },
      ],
    },
  ],
};
