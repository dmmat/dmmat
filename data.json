{
    "questions": [
        {
            "id": 1,
            "question": "Описати, як проводиться планування розробки системи",
            "answer": "<h2>Як проводиться планування розробки системи</h2> <ul> <li><b>Формулювання цілей проекту:</b> <ul> <li>Визначення бізнес-завдань, які має вирішити система.</li> <li>Оцінка користувацьких вимог і потреб.</li> </ul> </li> <li><b>Оцінка обсягу робіт:</b> <ul> <li>Розподіл системи на компоненти для спрощення управління.</li> <li>Визначення необхідних ресурсів, включаючи персонал, програмне забезпечення та обладнання.</li> </ul> </li> <li><b>Вибір методології розробки:</b> <ul> <li>Вибір між Agile, Waterfall, Scrum, Kanban або іншими підходами.</li> <li>Визначення інструментів для керування проектом (наприклад, Jira, Trello).</li> </ul> </li> <li><b>Визначення часових рамок (таймлайну):</b> <ul> <li>Складання графіка виконання проекту із зазначенням ключових етапів (міжетапів).</li> <li>Визначення кінцевого терміну реалізації.</li> </ul> </li> <li><b>Управління ризиками:</b> <ul> <li>Виявлення можливих ризиків (технічних, фінансових, часових).</li> <li>Розробка плану зниження ризиків.</li> </ul> </li> <li><b>Розробка бюджету проекту:</b> <ul> <li>Оцінка вартості розробки з урахуванням усіх витрат.</li> <li>Визначення джерел фінансування.</li> </ul> </li> <li><b>Планування командної роботи:</b> <ul> <li>Визначення складу команди, ролей і зон відповідальності.</li> <li>Розподіл завдань між учасниками.</li> </ul> </li> <li><b>Документування плану:</b> <ul> <li>Створення проектної документації, яка включає всі аспекти планування.</li> <li>Затвердження плану зацікавленими сторонами.</li> </ul> </li> <li><b>Моніторинг і контроль:</b> <ul> <li>Визначення механізмів для регулярного відстеження прогресу.</li> <li>Розробка метрик для оцінки виконання плану.</li> </ul> </li> </ul> <h3>Висновок:</h3> <p>Планування розробки системи — це базовий процес, який дозволяє визначити цілі, ресурси, ризики та часові рамки проекту. Завдяки ретельному плануванню забезпечується структурованість розробки, мінімізуються ризики і створюється чітке бачення для всіх учасників проекту.</p> "
        },
        {
            "id": 2,
            "question": "Планування проекту протягом життєвого циклу ПЗ",
            "answer": "<h2>Планування проекту протягом життєвого циклу ПЗ</h2> <ul> <li><b>Етап визначення вимог:</b> <ul> <li>Збір вимог від замовника та користувачів.</li> <li>Аналіз і документування вимог для створення технічного завдання.</li> </ul> </li> <li><b>Етап проектування:</b> <ul> <li>Розробка архітектури системи.</li> <li>Створення моделей і діаграм, що описують функціональність і взаємодії компонентів.</li> </ul> </li> <li><b>Етап реалізації:</b> <ul> <li>Написання програмного коду відповідно до затвердженого дизайну.</li> <li>Інтеграція модулів та забезпечення їхньої сумісності.</li> </ul> </li> <li><b>Етап тестування:</b> <ul> <li>Перевірка відповідності реалізації вимогам.</li> <li>Тестування на різних рівнях: модульному, інтеграційному, системному.</li> </ul> </li> <li><b>Етап впровадження:</b> <ul> <li>Розгортання системи в робочому середовищі.</li> <li>Навчання користувачів та надання технічної підтримки.</li> </ul> </li> <li><b>Етап супроводу:</b> <ul> <li>Виправлення помилок і технічна підтримка системи.</li> <li>Внесення змін і оновлень відповідно до нових вимог.</li> </ul> </li> </ul> <h3>Висновок:</h3> <p>Планування проекту протягом життєвого циклу ПЗ дозволяє чітко організувати процеси розробки, впровадження і підтримки системи. Послідовне виконання кожного етапу забезпечує високу якість і відповідність кінцевого продукту очікуванням користувачів.</p>"
        },
        {
            "id": 3,
            "question": "Описати підхід SWOT",
            "answer": "<h2>Описати підхід SWOT</h2><ul><li><b>SWOT-аналіз:</b> метод оцінки проекту шляхом ідентифікації внутрішніх сильних (Strengths) і слабких (Weaknesses) сторін, а також зовнішніх можливостей (Opportunities) і загроз (Threats).</li><li><b>Сильні сторони:</b> визначення конкурентних переваг, наприклад, досвід команди чи унікальна технологія.</li><li><b>Слабкі сторони:</b> аналіз недоліків, які можуть вплинути на реалізацію, наприклад, недостатній бюджет чи брак знань.</li><li><b>Можливості:</b> пошук зовнішніх факторів, які можуть сприяти успіху, наприклад, нові ринки чи партнерства.</li><li><b>Загрози:</b> аналіз потенційних ризиків, таких як конкуренція, економічні зміни чи технологічні бар’єри.</li></ul><h3>Висновок:</h3><p>SWOT-аналіз є важливим інструментом для стратегічного планування, що допомагає приймати обґрунтовані рішення, розробляючи стратегії використання можливостей і мінімізації ризиків.</p>"
        },
        {
            "id": 4,
            "question": "Проектування клієнт-серверних кооперативних взаємодій",
            "answer": "<h2>Проектування клієнт-серверних кооперативних взаємодій</h2><ul><li><b>Архітектура:</b> побудова системи, де клієнт надсилає запити серверу, а сервер обробляє їх і повертає результати.</li><li><b>Розподіл обов'язків:</b> клієнт відповідає за інтерфейс користувача і введення даних, сервер — за обробку, зберігання і виконання бізнес-логіки.</li><li><b>Комунікація:</b> використання протоколів (наприклад, HTTP, WebSocket) для обміну даними між клієнтом і сервером.</li><li><b>Безпека:</b> забезпечення захищеної передачі даних через шифрування (SSL/TLS) та автентифікацію користувачів.</li><li><b>Масштабованість:</b> проектування системи з можливістю горизонтального або вертикального масштабування серверів для підтримки великої кількості клієнтів.</li></ul><h3>Висновок:</h3><p>Проектування клієнт-серверних взаємодій спрямоване на забезпечення надійного, масштабованого і безпечного зв’язку між компонентами системи, враховуючи їхні ролі та обов'язки.</p>"
        },
        {
            "id": 5,
            "question": "Описати проектування транзакцій",
            "answer": "<h2>Описати проектування транзакцій</h2><ul><li><b>Визначення транзакції:</b> набір операцій, який виконується як єдине ціле, забезпечуючи цілісність даних.</li><li><b>ACID-властивості:</b> транзакції повинні бути атомарними (Atomicity), узгодженими (Consistency), ізольованими (Isolation) і стійкими (Durability).</li><li><b>Проектування механізмів блокування:</b> застосування блокувань для уникнення конфліктів між транзакціями при паралельному доступі до даних.</li><li><b>Обробка помилок:</b> реалізація механізмів відкату (rollback) у разі виникнення помилок або збоїв.</li><li><b>Логування транзакцій:</b> зберігання інформації про виконання транзакцій для відновлення даних у разі аварій.</li></ul><h3>Висновок:</h3><p>Проектування транзакцій забезпечує надійність, цілісність і послідовність даних у системі навіть у випадках збоїв або одночасного виконання декількох транзакцій.</p>"
        },
        {
            "id": 6,
            "question": "Описати програмування баз даних",
            "answer": "<h2>Описати програмування баз даних</h2><ul><li><b>Створення структури:</b> визначення таблиць, полів, індексів і зв’язків між даними.</li><li><b>Робота з мовами запитів:</b> використання SQL для маніпуляцій з даними (вставка, оновлення, видалення, вибірка).</li><li><b>Проектування запитів:</b> оптимізація складних запитів для підвищення продуктивності бази даних.</li><li><b>Забезпечення цілісності даних:</b> використання обмежень (ключі, унікальні значення) для забезпечення правильності даних.</li><li><b>Реалізація процедур і тригерів:</b> написання збережених процедур та автоматизованих тригерів для автоматизації бізнес-логіки.</li><li><b>Інтеграція з додатками:</b> підключення бази даних до програмного забезпечення через API або драйвери (наприклад, JDBC, ODBC).</li></ul><h3>Висновок:</h3><p>Програмування баз даних забезпечує ефективне управління даними, їхню цілісність та інтеграцію з іншими компонентами системи, що є ключовим для роботи сучасних програмних додатків.</p>"
        },
        {
            "id": 7,
            "question": "Описати підхід на основі використання прецедентів",
            "answer": "<h2>Описати підхід на основі використання прецедентів</h2> <p><b>Вступ:</b> Підхід на основі використання прецедентів передбачає моделювання функціональних вимог системи через сценарії взаємодії користувачів із системою. Це дозволяє чітко визначити поведінку системи в конкретних ситуаціях.</p> <ul> <li><b>Визначення прецедентів:</b> опис дій, які система виконує для досягнення певної мети користувача.</li> <li><b>Основні елементи:</b> актори (користувачі або інші системи), прецеденти (сценарії використання) та зв’язки між ними.</li> <li><b>Моделювання:</b> створення діаграм прецедентів, які відображають взаємодії між акторами і системою.</li> <li><b>Переваги:</b> спрощення комунікації між розробниками, аналітиками та замовниками; забезпечення повноти вимог.</li> <li><b>Обмеження:</b> підхід не враховує нефункціональні вимоги, наприклад, продуктивність або безпеку.</li> </ul> <h3>Висновок:</h3> <p>Використання прецедентів дозволяє зосередитися на функціональності системи з точки зору користувачів, що полегшує процес розробки та підвищує відповідність вимогам замовника.</p> "
        },
        {
            "id": 8,
            "question": "Описати підхід на основі використання іменних груп",
            "answer": "<h2>Описати підхід на основі використання іменних груп</h2><p><b>Вступ:</b> Підхід на основі використання іменних груп орієнтований на виявлення сутностей системи шляхом аналізу термінології, що використовується в документах, описах процесів і діалогах з користувачами.</p><ul><li><b>Виявлення іменних груп:</b> аналіз текстів для визначення ключових іменників, які відповідають сутностям предметної області.</li><li><b>Класифікація:</b> групування знайдених іменників за категоріями, такими як об’єкти, дії, події, ролі тощо.</li><li><b>Рефінування:</b> перевірка і уточнення визначених груп через консультації з експертами предметної області.</li><li><b>Переваги:</b> забезпечує чітке розуміння предметної області; спрощує подальше моделювання.</li><li><b>Обмеження:</b> залежність від якості вхідної документації; можливі неоднозначності в інтерпретації термінів.</li></ul><h3>Висновок:</h3><p>Підхід на основі іменних груп допомагає систематизувати знання про предметну область, забезпечуючи основу для проектування системи та її компонентів.</p>"
        },
        {
            "id": 9,
            "question": "Описати підхід на основі використання загальних шаблонів для класів",
            "answer": "<h2>Описати підхід на основі використання загальних шаблонів для класів</h2><p><b>Вступ:</b> Підхід на основі використання загальних шаблонів для класів полягає у створенні базових структур для класів, які можуть бути повторно використані в різних частинах системи. Це сприяє уніфікації, зниженню складності та підвищенню продуктивності розробки.</p><ul><li><b>Визначення загальних шаблонів:</b> формалізація спільних властивостей і методів для групи класів з подібними функціями.</li><li><b>Створення абстракцій:</b> використання базових класів або інтерфейсів для визначення спільних характеристик.</li><li><b>Реалізація:</b> використання механізму наслідування або композиції для створення спеціалізованих класів на основі шаблонів.</li><li><b>Переваги:</b> підвищує повторне використання коду; зменшує кількість помилок через стандартизацію.</li><li><b>Обмеження:</b> складність управління великою кількістю шаблонів; потребує ретельного планування для уникнення надмірного наслідування.</li></ul><h3>Висновок:</h3><p>Підхід на основі загальних шаблонів для класів забезпечує структурований підхід до проектування, знижує дублювання коду та сприяє підтримуваності і масштабованості системи.</p>"
        },
        {
            "id": 10,
            "question": "Дати поняття прототипуванню",
            "answer": "<h2>Дати поняття прототипуванню</h2><p><b>Вступ:</b> Прототипування — це процес створення спрощеної версії системи для демонстрації основної функціональності або перевірки концепції. Воно використовується для валідації ідей, виявлення вимог та оцінки користувацького досвіду на ранніх етапах розробки.</p><ul><li><b>Види прототипів:</b> паперові (скетчі), інтерактивні макети, програмні прототипи.</li><li><b>Етапи створення:</b> збір вимог, розробка прототипу, тестування з користувачами, внесення змін.</li><li><b>Цілі прототипування:</b> виявлення вимог, оцінка користувацького інтерфейсу, перевірка технічної здійсненності.</li><li><b>Переваги:</b> знижує ризики, скорочує витрати на доопрацювання, покращує комунікацію з клієнтами.</li><li><b>Обмеження:</b> прототипи можуть не відображати повну функціональність; ризик залежності від первинної концепції.</li></ul><h3>Висновок:</h3><p>Прототипування є важливим етапом розробки, який дозволяє ітеративно вдосконалювати продукт, забезпечуючи його відповідність потребам користувачів і технічним вимогам.</p>"
        },
        {
            "id": 11,
            "question": "Назвати принципи встановлення вимог",
            "answer": "<h2>Назвати принципи встановлення вимог</h2><p><b>Вступ:</b> Встановлення вимог є ключовим етапом у розробці програмного забезпечення, який забезпечує чітке визначення того, що повинна робити система. Для цього використовуються певні принципи, що сприяють точності, повноті та зрозумілості вимог.</p><ul><li><b>Чіткість і зрозумілість:</b> вимоги повинні бути зрозумілими для всіх зацікавлених сторін, без двозначностей.</li><li><b>Повнота:</b> усі необхідні функції, обмеження та сценарії використання повинні бути задокументовані.</li><li><b>Послідовність:</b> вимоги не повинні суперечити одна одній або вже існуючим специфікаціям.</li><li><b>Перевірюваність:</b> кожну вимогу можна перевірити тестуванням або іншим методом валідації.</li><li><b>Мінімізація припущень:</b> уникати неявних передбачень; кожна вимога має бути чітко визначена.</li><li><b>Пріоритизація:</b> вимоги мають бути розподілені за важливістю для ефективного управління розробкою.</li><li><b>Гнучкість:</b> вимоги повинні мати можливість адаптації до змін у процесі розробки.</li></ul><h3>Висновок:</h3><p>Дотримання принципів встановлення вимог забезпечує створення якісної бази для розробки, мінімізує ризики і сприяє успішному виконанню проекту відповідно до очікувань замовників.</p>"
        },
        {
            "id": 12,
            "question": "Поясніть різницю між етапами визначення вимог і розробки специфікації",
            "answer": "<h2>Поясніть різницю між етапами визначення вимог і розробки специфікації</h2><p><b>Вступ:</b> Етапи визначення вимог і розробки специфікації є взаємопов’язаними, але мають різні цілі та завдання у процесі розробки програмного забезпечення. Вони формують основу для побудови якісної системи.</p><ul><li><b>Визначення вимог:</b> процес збору інформації про потреби користувачів і бізнесу. Цей етап включає інтерв’ю, анкетування, аналіз документації та виявлення функціональних і нефункціональних вимог.</li><li><b>Розробка специфікації:</b> документування вимог у структурованій формі, яка забезпечує чітке розуміння того, як повинна працювати система. Цей документ слугує договором між замовником і розробниками.</li><li><b>Різниця в акценті:</b> етап визначення вимог орієнтований на ідентифікацію потреб, тоді як специфікація фокусується на формалізації цих вимог.</li><li><b>Різниця в результатах:</b> результат визначення вимог — перелік вимог; результат розробки специфікації — формалізований документ (наприклад, SRS — Software Requirements Specification).</li><li><b>Роль у розробці:</b> визначення вимог є базою для створення специфікації, а специфікація — основою для проектування та реалізації.</li></ul><h3>Висновок:</h3><p>Етап визначення вимог відповідає за збір і уточнення потреб, тоді як розробка специфікації забезпечує їх структуроване представлення. Разом вони забезпечують основу для створення якісного програмного продукту.</p>"
        },
        {
            "id": 13,
            "question": "Поясніть взаємозв'язок двох етапів проектування (архітектурне проектування і деталізоване проектування) з першими двома етапами життєвого циклу — етапом визначення вимог і етапом розробки специфікації",
            "answer": "<h2>Поясніть взаємозв'язок двох етапів проектування (архітектурне проектування і деталізоване проектування) з першими двома етапами життєвого циклу — етапом визначення вимог і етапом розробки специфікації</h2><p><b>Вступ:</b> Проектування програмного забезпечення починається з визначення вимог і розробки специфікації. Ці етапи є основою для подальшого проектування, яке включає архітектурне і деталізоване проектування.</p><ul><li><b>Архітектурне проектування:</b> на основі вимог і специфікації створюється загальна структура системи, визначаються основні компоненти, їхні функції та взаємодія між ними. Використовуються принципи модульності, масштабованості та безпеки.</li><li><b>Деталізоване проектування:</b> розробляються детальні моделі та алгоритми для кожного компонента, визначаються дані, які будуть використовуватися, і способи їхньої обробки.</li><li><b>Залежність від вимог:</b> вимоги визначають, що повинна робити система, а специфікація уточнює, як саме це буде реалізовано. Архітектурне проектування забезпечує макет, а деталізоване наповнює його конкретними деталями.</li><li><b>Взаємозв’язок:</b> архітектурне проектування забезпечує основу для деталізованого, а специфікація вимог гарантує, що проектування відповідає очікуванням замовника.</li><li><b>Постійний зворотній зв’язок:</b> уточнення або зміни в специфікації можуть вплинути на обидва етапи проектування.</li></ul><h3>Висновок:</h3><p>Архітектурне і деталізоване проектування нерозривно пов’язані з визначенням вимог і специфікацією, забезпечуючи перехід від бізнес-завдань до технічної реалізації. Цей взаємозв’язок забезпечує відповідність розробки потребам користувачів і бізнесу.</p>"
        },
        {
            "id": 14,
            "question": "Поясніть, у чому складається розходження між розподіленою системою обробки і розподіленою системою баз даних",
            "answer": "<h2>Поясніть, у чому складається розходження між розподіленою системою обробки і розподіленою системою баз даних</h2><p><b>Вступ:</b> Розподілені системи забезпечують розподіл ресурсів і обчислень між кількома вузлами. Однак розподілені системи обробки і баз даних мають різну мету і специфіку реалізації.</p><ul><li><b>Розподілена система обробки:</b> орієнтована на виконання обчислень і розподіл обчислювальних завдань між кількома вузлами для підвищення продуктивності. Приклад: розподілені обчислення в хмарних середовищах.</li><li><b>Розподілена система баз даних:</b> зосереджена на зберіганні даних у кількох вузлах, забезпечуючи доступ, узгодженість і цілісність даних. Приклад: системи реплікації даних або шардінг у базах даних.</li><li><b>Ціль:</b> у системах обробки — прискорення обчислень; у системах баз даних — забезпечення доступності та надійності даних.</li><li><b>Методи реалізації:</b> у системах обробки використовуються механізми розподілу задач і балансування навантаження, тоді як у системах баз даних — реплікація, шардінг та контроль паралельного доступу.</li><li><b>Тип даних:</b> системи обробки працюють з потоками даних у процесі виконання задач, а системи баз даних — з довготривалим зберіганням і маніпуляцією даних.</li></ul><h3>Висновок:</h3><p>Основна різниця між розподіленими системами обробки і баз даних полягає в їхньому призначенні: перші оптимізують обчислення, а другі забезпечують доступність і узгодженість даних. Вони можуть використовуватися разом для створення високопродуктивних і надійних систем.</p>"
        },
        {
            "id": 15,
            "question": "Поясніть, у чому полягають основні розходження чотирьох підходів до виявлення класів",
            "answer": "<h2>Поясніть, у чому полягають основні розходження чотирьох підходів до виявлення класів</h2><p><b>Вступ:</b> Виявлення класів є ключовим етапом об’єктно-орієнтованого аналізу, і для цього застосовуються різні підходи. Кожен із підходів має власний фокус і методологію.</p><ul><li><b>Підхід на основі аналізу предметної області:</b> визначає класи на основі об’єктів реального світу, що стосуються предметної області. Наприклад, клієнт, продукт, замовлення.</li><li><b>Підхід на основі використання сценаріїв:</b> виявляє класи через аналіз сценаріїв використання, зосереджуючись на акторах і їх взаємодії з системою.</li><li><b>Підхід на основі іменних груп:</b> використовує аналіз текстів і документації для виявлення ключових іменників і груп, які можуть стати класами.</li><li><b>Шаблонний підхід:</b> застосовує загальні шаблони проектування, наприклад, «фабрика» або «адаптер», для визначення класів і їхньої взаємодії.</li></ul><h3>Висновок:</h3><p>Кожен підхід до виявлення класів спрямований на спрощення процесу моделювання, враховуючи специфіку проекту. Вибір методу залежить від вимог, предметної області та наявності початкової інформації.</p>"
        },
        {
            "id": 16,
            "question": "Дати поняття CASE-засобам та удосконалюванню процеса",
            "answer": "<h2>Дати поняття CASE-засобам та удосконалюванню процеса</h2><p><b>Вступ:</b> CASE (Computer-Aided Software Engineering) засоби — це програмні інструменти, які підтримують автоматизацію процесів розробки програмного забезпечення, сприяючи підвищенню продуктивності та якості проектів.</p><ul><li><b>Поняття CASE-засобів:</b> програмні рішення, що допомагають автоматизувати завдання аналізу, проектування, тестування, управління конфігураціями та документування.</li><li><b>Класифікація:</b> верхнього рівня (підтримка аналізу та проектування), нижнього рівня (підтримка кодування і тестування) та інтегровані (охоплюють весь життєвий цикл).</li><li><b>Переваги:</b> скорочення часу розробки, зниження ризиків помилок, забезпечення повторного використання коду, підвищення стандартів розробки.</li><li><b>Удосконалення процесу:</b> за допомогою CASE-засобів можна забезпечити безперервне вдосконалення процесів через автоматизацію рутинних завдань, стандартизацію і моніторинг.</li><li><b>Приклади CASE-засобів:</b> Rational Rose, Enterprise Architect, Visual Paradigm.</li></ul><h3>Висновок:</h3><p>CASE-засоби дозволяють оптимізувати розробку програмного забезпечення, автоматизуючи ключові етапи і підвищуючи якість кінцевого продукту. Їх використання сприяє ефективному управлінню та вдосконаленню процесів розробки.</p>"
        },
        {
            "id": 17,
            "question": "Назвати та описати системи для трьох рівнів керування",
            "answer": "<h2>Назвати та описати системи для трьох рівнів керування</h2><p><b>Вступ:</b> У системах керування виділяють три рівні: операційний, тактичний та стратегічний. Кожен рівень має свої особливості та типи інформаційних систем, які підтримують його функції.</p><ul><li><b>Операційний рівень:</b> системи підтримки операційної діяльності (Transaction Processing Systems, TPS). Вони обробляють повсякденні транзакції, наприклад, облік продажів або управління запасами.</li><li><b>Тактичний рівень:</b> системи управлінської інформації (Management Information Systems, MIS). Вони забезпечують аналіз даних і створення звітів для середнього керівництва. Приклад: системи звітності для відстеження виконання планів.</li><li><b>Стратегічний рівень:</b> системи підтримки прийняття рішень (Decision Support Systems, DSS) та виконавчі інформаційні системи (Executive Information Systems, EIS). Вони допомагають приймати довгострокові рішення на основі аналітичних даних і прогнозів. Приклад: системи для аналізу ринку.</li></ul><h3>Висновок:</h3><p>Кожен рівень керування використовує свої інформаційні системи для забезпечення ефективного виконання функцій, від обробки операцій до підтримки стратегічного планування і прийняття рішень.</p>"
        },
        {
            "id": 18,
            "question": "Назвати та описати стратегію повторного використання",
            "answer": "<h2>Назвати та описати стратегію повторного використання</h2><p><b>Вступ:</b> Стратегія повторного використання полягає у зниженні витрат на розробку та підвищенні продуктивності шляхом повторного використання існуючих компонентів, модулів або архітектур у нових проектах.</p><ul><li><b>Програмні бібліотеки:</b> використання готових бібліотек для реалізації поширених функцій, таких як обробка даних чи взаємодія з базами даних.</li><li><b>Шаблони проектування:</b> повторне використання стандартних рішень для типових задач, наприклад, Singleton або Factory.</li><li><b>Компонентно-орієнтоване програмування:</b> створення незалежних компонентів, які можна інтегрувати в різні системи.</li><li><b>Мікросервісна архітектура:</b> розробка сервісів, що виконують конкретні функції, які легко масштабуються і повторно використовуються.</li><li><b>Переваги:</b> зниження витрат і часу розробки, покращення якості через перевірені компоненти, стандартизація.</li><li><b>Недоліки:</b> залежність від сторонніх рішень, можливі труднощі з адаптацією до специфічних потреб проекту.</li></ul><h3>Висновок:</h3><p>Стратегія повторного використання дозволяє значно оптимізувати процес розробки, скорочуючи витрати та час, забезпечуючи при цьому високу якість і стандартизацію програмних рішень.</p>"
        },
        {
            "id": 19,
            "question": "Дати поняття специфікації вимог та описати, як проводиться її розробка",
            "answer": "<h2>Дати поняття специфікації вимог та описати, як проводиться її розробка</h2><p><b>Вступ:</b> Специфікація вимог (Software Requirements Specification, SRS) — це документ, який формалізує всі функціональні та нефункціональні вимоги до програмного забезпечення, забезпечуючи основу для його проектування і розробки.</p><ul><li><b>Поняття специфікації:</b> це структурований опис того, що повинна виконувати система, включаючи функціональність, інтерфейси, продуктивність і обмеження.</li><li><b>Етапи розробки специфікації:</b></li><ul><li><b>Збір вимог:</b> взаємодія із замовниками та користувачами для визначення потреб.</li><li><b>Аналіз вимог:</b> оцінка їхньої повноти, узгодженості та досяжності.</li><li><b>Документування:</b> створення специфікації з використанням зрозумілої мови, схем і діаграм.</li><li><b>Перевірка:</b> забезпечення відповідності документу очікуванням зацікавлених сторін.</li></ul><li><b>Переваги специфікації:</b> забезпечує єдине бачення для команди, зменшує ризик непорозумінь, слугує основою для тестування.</li><li><b>Недоліки:</b> може потребувати багато часу для створення, ризик частих оновлень через зміни вимог.</li></ul><h3>Висновок:</h3><p>Специфікація вимог є ключовим інструментом у розробці програмного забезпечення, забезпечуючи чітке і структуроване уявлення про те, як повинна працювати система, і зменшуючи ризики невідповідності між очікуваннями замовників і результатом.</p>"
        },
        {
            "id": 20,
            "question": "Дати поняття специфікації станів та описати, як проводиться її розробка",
            "answer": "<h2>Дати поняття специфікації станів та описати, як проводиться її розробка</h2><p><b>Вступ:</b> Специфікація станів — це формалізований опис усіх можливих станів системи та умов, за яких відбувається їхній перехід. Вона використовується для моделювання поведінки системи в динамічних сценаріях.</p><ul><li><b>Поняття специфікації станів:</b> опис станів об'єкта чи системи, що змінюються в залежності від подій, дій чи інших факторів.</li><li><b>Етапи розробки специфікації:</b></li><ul><li><b>Ідентифікація станів:</b> визначення всіх можливих станів системи (наприклад, «Активний», «Неактивний»).</li><li><b>Визначення подій:</b> ідентифікація подій, які ініціюють перехід між станами (наприклад, «Користувач увійшов»).</li><li><b>Створення діаграми станів:</b> графічне представлення станів і переходів між ними.</li><li><b>Документування:</b> опис логіки переходів і умов для кожного стану.</li></ul><li><b>Переваги:</b> забезпечує точність у моделюванні поведінки системи; спрощує тестування та налагодження.</li><li><b>Недоліки:</b> складність у великих системах із численними станами; потреба в ретельному аналізі для забезпечення повноти.</li></ul><h3>Висновок:</h3><p>Специфікація станів дозволяє чітко визначити поведінку системи у різних ситуаціях, забезпечуючи її передбачуваність і полегшуючи проектування, тестування та супровід програмного забезпечення.</p>"
        },
        {
            "id": 21,
            "question": "Описати спільну розробку додатків (JAD-метод)",
            "answer": "<h2>Описати спільну розробку додатків (JAD-метод)</h2><p><b>Вступ:</b> JAD (Joint Application Development) — це методологія, що базується на тісній співпраці замовників, користувачів і розробників для швидкої та ефективної розробки вимог і проектування додатків.</p><ul><li><b>Ціль JAD:</b> створення чіткого розуміння вимог до системи шляхом проведення інтерактивних сесій між всіма зацікавленими сторонами.</li><li><b>Ключові елементи JAD:</b></li><ul><li><b>Модератор:</b> відповідає за проведення сесій і забезпечення продуктивності обговорень.</li><li><b>Користувачі:</b> надають інформацію про потреби та очікування від системи.</li><li><b>Аналітики:</b> документують вимоги і проектують систему відповідно до обговореного.</li><li><b>Розробники:</b> надають технічну експертизу для оцінки реалізації вимог.</li></ul><li><b>Процес JAD:</b></li><ul><li><b>Підготовка:</b> визначення цілей, складу учасників та організація сесій.</li><li><b>Сесії JAD:</b> інтерактивні зустрічі для збору, обговорення і уточнення вимог.</li><li><b>Документування:</b> створення специфікації вимог на основі результатів сесій.</li></ul><li><b>Переваги:</b> прискорює процес збору вимог; підвищує залученість користувачів; зменшує ризик непорозумінь.</li><li><b>Недоліки:</b> вимагає значних ресурсів для організації сесій; складність координації великої кількості учасників.</li></ul><h3>Висновок:</h3><p>JAD-метод забезпечує ефективну комунікацію між замовниками, користувачами та розробниками, що дозволяє швидко збирати вимоги та уникати непорозумінь у процесі розробки.</p>"
        },
        {
            "id": 22,
            "question": "Назвати та описати системні сервіси",
            "answer": "<h2>Назвати та описати системні сервіси</h2><p><b>Вступ:</b> Системні сервіси — це базові компоненти операційних систем і програмного забезпечення, які забезпечують виконання ключових функцій для роботи додатків і користувачів. Вони надають інтерфейси для доступу до ресурсів і виконання системних завдань.</p><ul><li><b>Файлові сервіси:</b> надають доступ до файлової системи, забезпечують зберігання, читання, запис і управління файлами.</li><li><b>Мережеві сервіси:</b> підтримують обмін даними між пристроями в мережі, включаючи маршрутизацію, передачу даних і управління з'єднаннями.</li><li><b>Сервіси управління ресурсами:</b> забезпечують управління процесорами, пам'яттю, пристроями введення-виведення та іншими ресурсами системи.</li><li><b>Сервіси безпеки:</b> забезпечують автентифікацію, авторизацію, шифрування даних і управління доступом для захисту системи від несанкціонованого використання.</li><li><b>Сервіси баз даних:</b> надають доступ до управління даними, забезпечуючи їх збереження, запити і транзакції.</li><li><b>Моніторингові сервіси:</b> дозволяють відстежувати стан системи, збирати логи та генерувати звіти про помилки.</li></ul><h3>Висновок:</h3><p>Системні сервіси забезпечують стабільну роботу програмного забезпечення та операційних систем, виконуючи ключові функції для підтримки роботи користувачів і додатків, а також забезпечуючи доступ до ресурсів і захист даних.</p>"
        },
        {
            "id": 23,
            "question": "Назвати та описати етапи життєвого циклу програмного забезпечення",
            "answer": "<h2>Назвати та описати етапи життєвого циклу програмного забезпечення</h2><p><b>Вступ:</b> Життєвий цикл програмного забезпечення (ПЗ) охоплює весь процес розробки, впровадження та підтримки програмного продукту. Він включає послідовність етапів, які забезпечують організовану і ефективну розробку ПЗ.</p><ul><li><b>Визначення вимог:</b> збір, аналіз і документування функціональних та нефункціональних вимог до ПЗ.</li><li><b>Проектування:</b> створення архітектури та деталізованого дизайну системи, включаючи моделі даних і взаємодію компонентів.</li><li><b>Реалізація (кодинг):</b> написання коду відповідно до специфікацій і проекту.</li><li><b>Тестування:</b> перевірка ПЗ на відповідність вимогам і виявлення помилок через модульні, інтеграційні та системні тести.</li><li><b>Впровадження:</b> установка програмного продукту в робоче середовище, навчання користувачів і надання документації.</li><li><b>Експлуатація та супровід:</b> підтримка ПЗ, виправлення помилок, оновлення функціональності та адаптація до нових вимог.</li><li><b>Завершення використання:</b> припинення підтримки продукту, архівація даних і видалення системи, якщо це необхідно.</li></ul><h3>Висновок:</h3><p>Етапи життєвого циклу ПЗ забезпечують структурований підхід до створення програмного продукту, сприяють ефективності розробки, мінімізації ризиків і задоволенню вимог користувачів.</p>"
        },
        {
            "id": 24,
            "question": "Описати етап встановлення вимог",
            "answer": "<h2>Описати етап встановлення вимог</h2><p><b>Вступ:</b> Етап встановлення вимог є початковим і критичним етапом у життєвому циклі програмного забезпечення, під час якого збираються, аналізуються і документуються очікування замовників та користувачів щодо системи.</p><ul><li><b>Збір вимог:</b> використання інтерв’ю, анкетування, аналізу документів і спостереження для виявлення потреб користувачів.</li><li><b>Аналіз вимог:</b> оцінка отриманих вимог на предмет їхньої узгодженості, повноти та здійсненності.</li><li><b>Категоризація:</b> поділ вимог на функціональні (що система повинна робити) та нефункціональні (як вона повинна це робити: продуктивність, безпека тощо).</li><li><b>Пріоритизація:</b> визначення важливості кожної вимоги для оптимізації процесу розробки.</li><li><b>Документування:</b> формалізація вимог у вигляді специфікації вимог (SRS), яка буде основою для подальших етапів.</li><li><b>Перевірка і затвердження:</b> забезпечення того, щоб документовані вимоги відповідали очікуванням зацікавлених сторін.</li></ul><h3>Висновок:</h3><p>Етап встановлення вимог закладає основу для успішної розробки програмного забезпечення, забезпечуючи чітке розуміння цілей проекту і зменшуючи ризик помилок і непорозумінь у майбутньому.</p>"
        },
        {
            "id": 25,
            "question": "Описати етап специфікації вимог",
            "answer": "<h2>Описати етап специфікації вимог</h2><p><b>Вступ:</b> Етап специфікації вимог полягає в створенні детального документа, який формалізує вимоги до програмного забезпечення. Цей документ є основою для проектування, розробки та тестування системи.</p><ul><li><b>Збір інформації:</b> аналіз результатів етапу встановлення вимог для створення структурованого документа.</li><li><b>Структурування вимог:</b> організація вимог у логічному порядку, включаючи функціональні та нефункціональні вимоги.</li><li><b>Формалізація:</b> використання діаграм, моделей і описів для представлення вимог у зрозумілому форматі.</li><li><b>Перевірка:</b> забезпечення узгодженості, повноти і коректності специфікації через перегляд зацікавленими сторонами.</li><li><b>Узгодження:</b> затвердження специфікації замовником, розробниками і тестувальниками для забезпечення єдиного розуміння.</li><li><b>Інструменти:</b> використання CASE-засобів, таких як Rational Rose або Visual Paradigm, для створення і підтримки специфікації.</li></ul><h3>Висновок:</h3><p>Етап специфікації вимог забезпечує створення детального і зрозумілого опису системи, який служить базою для всіх наступних етапів розробки, зменшуючи ризик помилок і непорозумінь.</p>"
        },
        {
            "id": 26,
            "question": "Описати етап проектування архітектури",
            "answer": "<h2>Описати етап проектування архітектури</h2><p><b>Вступ:</b> Етап проектування архітектури полягає у створенні високорівневої структури системи, що визначає основні компоненти, їхні функції та взаємодії. Це критичний етап, який формує основу для подальшого деталізованого проектування і розробки.</p><ul><li><b>Визначення архітектурного стилю:</b> вибір підходу до побудови системи, наприклад, клієнт-серверна архітектура, мікросервісна архітектура, багатошарова архітектура тощо.</li><li><b>Декомпозиція системи:</b> розподіл системи на компоненти з чітко визначеними ролями і відповідальністю.</li><li><b>Визначення взаємодій:</b> проектування способів комунікації між компонентами через API, повідомлення або спільні дані.</li><li><b>Вибір технологій:</b> визначення інструментів і платформ для реалізації компонентів, таких як бази даних, сервери додатків або протоколи зв’язку.</li><li><b>Забезпечення нефункціональних вимог:</b> врахування аспектів продуктивності, безпеки, масштабованості, надійності та інших характеристик.</li><li><b>Документування:</b> створення архітектурних діаграм і описів, що детально описують компоненти, їхні функції та взаємодії.</li></ul><h3>Висновок:</h3><p>Етап проектування архітектури забезпечує структуровану основу для побудови системи, визначаючи її компоненти, їхні взаємодії і технології, що дозволяє ефективно реалізувати вимоги і забезпечити масштабованість і надійність програмного продукту.</p>"
        },
        {
            "id": 27,
            "question": "Описати етап деталізованого проектування",
            "answer": "<h2>Описати етап деталізованого проектування</h2><p><b>Вступ:</b> Етап деталізованого проектування полягає в розробці детальних специфікацій для кожного компонента системи, визначеного на етапі архітектурного проектування. Це забезпечує готовність до реалізації і знижує ризики помилок під час розробки.</p><ul><li><b>Декомпозиція компонентів:</b> розподіл кожного архітектурного компонента на дрібніші підкомпоненти або модулі.</li><li><b>Розробка алгоритмів:</b> створення алгоритмів і логіки для реалізації функціональності кожного модуля.</li><li><b>Проектування баз даних:</b> визначення структури таблиць, зв’язків, ключів, індексів і транзакцій для роботи з даними.</li><li><b>Інтерфейси модулів:</b> визначення API для взаємодії між модулями, включаючи входи, виходи і типи даних.</li><li><b>Документування:</b> створення детальних схем, діаграм класів, послідовностей і станів для опису логіки та взаємодій.</li><li><b>Забезпечення відповідності вимогам:</b> перевірка кожного модуля на відповідність функціональним і нефункціональним вимогам.</li></ul><h3>Висновок:</h3><p>Етап деталізованого проектування є мостом між архітектурою системи та її реалізацією, забезпечуючи детальний план для розробників і гарантуючи відповідність вимогам і архітектурним принципам.</p>"
        },
        {
            "id": 28,
            "question": "Описати етап реалізації",
            "answer": "<h2>Описати етап реалізації</h2><p><b>Вступ:</b> Етап реалізації — це процес перетворення проектної документації на програмний код. Цей етап передбачає написання, тестування і інтеграцію коду для створення робочого програмного продукту.</p><ul><li><b>Написання коду:</b> реалізація функціональності системи згідно з деталізованим проектуванням, використовуючи вибрані мови програмування і середовища розробки.</li><li><b>Використання стандартів:</b> дотримання стандартів кодування для забезпечення читабельності, повторного використання і підтримуваності коду.</li><li><b>Інтеграція компонентів:</b> з’єднання окремих модулів у єдину систему і перевірка їхньої сумісності.</li><li><b>Тестування коду:</b> проведення модульного тестування для перевірки правильності реалізації окремих функцій.</li><li><b>Контроль версій:</b> використання інструментів для управління версіями коду (наприклад, Git) для відстеження змін і забезпечення співпраці команди.</li><li><b>Документування:</b> створення технічної документації для коду, включаючи коментарі, інструкції для користувачів і адміністративні гайди.</li></ul><h3>Висновок:</h3><p>Етап реалізації є ключовим для перетворення проекту в готовий програмний продукт. Його успішне виконання залежить від точності дотримання специфікацій, стандартів кодування і ретельного тестування.</p>"
        },
        {
            "id": 29,
            "question": "Назвати та описати елементарні типи моделі РБД",
            "answer": "<h2>Назвати та описати елементарні типи моделі РБД</h2><p><b>Вступ:</b> Реляційна база даних (РБД) базується на використанні таблиць для зберігання і маніпуляції даними. Елементарні типи моделі РБД визначають основні структурні компоненти, які формують таблиці.</p><ul><li><b>Сутність (Entity):</b> основна таблиця, яка представляє об’єкти або поняття з реального світу. Кожен рядок (запис) відповідає окремій сутності, а стовпці — її атрибутам.</li><li><b>Атрибут (Attribute):</b> стовпці таблиці, які визначають властивості або характеристики сутності. Наприклад, ім’я, адреса або дата народження.</li><li><b>Ключ (Key):</b> унікальний ідентифікатор запису. Основний ключ (Primary Key) забезпечує унікальність кожного запису в таблиці.</li><li><b>Зв’язок (Relationship):</b> визначає асоціації між сутностями, представленими через зовнішні ключі (Foreign Key), що вказують на записи інших таблиць.</li><li><b>Домен (Domain):</b> набір допустимих значень для атрибуту, наприклад, типи даних або обмеження.</li><li><b>Обмеження (Constraint):</b> правила, які забезпечують цілісність даних, наприклад, обмеження на унікальність, не-null значення або перевірки значень.</li></ul><h3>Висновок:</h3><p>Елементарні типи моделі РБД є основою для структурування та організації даних у реляційних базах даних. Вони забезпечують логічну і зрозумілу організацію інформації та підтримують її цілісність.</p>"
        },
        {
            "id": 30,
            "question": "Назвати основи об'єктної технології",
            "answer": "<h2>Назвати основи об'єктної технології</h2><p><b>Вступ:</b> Об'єктна технологія — це підхід до розробки програмного забезпечення, який базується на концепції об'єктів, що поєднують дані і методи для роботи з ними. Вона є основою об'єктно-орієнтованого програмування (ООП).</p><ul><li><b>Інкапсуляція:</b> принцип приховування реалізації об'єкта та надання доступу до його даних і методів через чітко визначений інтерфейс.</li><li><b>Поліморфізм:</b> здатність об'єктів різних класів відповідати на однакові повідомлення по-різному, забезпечуючи гнучкість і повторне використання коду.</li><li><b>Наслідування:</b> можливість створення нових класів на основі вже існуючих, що дозволяє повторно використовувати код і розширювати його функціональність.</li><li><b>Абстракція:</b> процес виділення суттєвих характеристик об'єкта, ігноруючи несуттєві деталі, для створення узагальненої моделі.</li><li><b>Об'єкти:</b> основні елементи, які мають стан (дані) і поведінку (методи) і взаємодіють між собою через повідомлення.</li><li><b>Класи:</b> шаблони для створення об'єктів, що визначають їхню структуру і поведінку.</li><li><b>Модульність:</b> принцип розділення системи на незалежні модулі (класи або об'єкти), що сприяє її зрозумілості, підтримуваності і повторному використанню.</li></ul><h3>Висновок:</h3><p>Основи об'єктної технології забезпечують потужний і гнучкий підхід до розробки програмного забезпечення, спрямований на підвищення ефективності, повторного використання коду і його масштабованості.</p>"
        },
        {
            "id": 32,
            "question": "Дати визначення та описати об'єктно-реляційну модель бази даних",
            "answer": "<h2>Дати визначення та описати об'єктно-реляційну модель бази даних</h2><p><b>Вступ:</b> Об'єктно-реляційна модель бази даних (ОРМБД) поєднує концепції об'єктно-орієнтованого програмування (ООП) з реляційною моделлю бази даних, забезпечуючи збереження складних об'єктів у реляційній структурі.</p><ul><li><b>Визначення:</b> модель даних, яка дозволяє зберігати об'єкти з їх атрибутами, методами та ієрархіями в реляційних таблицях бази даних.</li><li><b>Основні особливості:</b></li><ul><li><b>Розширені типи даних:</b> підтримка складних типів, таких як масиви, XML, JSON, та об'єкти.</li><li><b>Наслідування:</b> можливість зберігати ієрархії класів за допомогою реляційних таблиць.</li><li><b>Інкапсуляція:</b> підтримка збережених процедур і тригерів для реалізації поведінки об'єктів.</li></ul><li><b>Переваги:</b> забезпечує більшу гнучкість у роботі зі складними структурами даних, знижує розрив між об'єктною моделлю програмування і реляційною моделлю бази даних.</li><li><b>Недоліки:</b> більша складність у налаштуванні та використанні порівняно з традиційними реляційними базами даних.</li><li><b>Приклади СУБД:</b> PostgreSQL, Oracle Database, DB2.</li></ul><h3>Висновок:</h3><p>Об'єктно-реляційна модель бази даних є ефективним інструментом для зберігання та управління складними структурами даних, забезпечуючи поєднання об'єктно-орієнтованих і реляційних підходів у розробці програмного забезпечення.</p>"
        },
        {
            "id": 33,
            "question": "Описати види блокувань при песимістичному керуванні паралельністю",
            "answer": "<h2>Описати види блокувань при песимістичному керуванні паралельністю</h2><p><b>Вступ:</b> Песимістичне керування паралельністю використовує блокування для запобігання конфліктам при одночасному доступі до даних. Це забезпечує узгодженість даних, але може знижувати продуктивність через очікування.</p><ul><li><b>Ексклюзивне блокування (Exclusive Lock):</b> забороняє будь-який доступ до ресурсу, окрім поточного процесу. Використовується при записі даних.</li><li><b>Поділюване блокування (Shared Lock):</b> дозволяє кільком транзакціям читати дані одночасно, але блокує запис.</li><li><b>Рекурсивне блокування (Recursive Lock):</b> дозволяє одній транзакції кілька разів блокувати той самий ресурс без виникнення конфліктів.</li><li><b>Блокування з намірами (Intent Lock):</b> інформує систему про намір транзакції заблокувати ресурс, забезпечуючи координацію між блокуваннями на рівнях таблиць і записів.</li><li><b>Читання-запис блокування (Read-Write Lock):</b> розділяє доступ до ресурсу на два типи: для читання або запису, що знижує конфлікти.</li></ul><h3>Висновок:</h3><p>Види блокувань при песимістичному керуванні паралельністю дозволяють ефективно запобігати конфліктам між транзакціями, забезпечуючи узгодженість даних, але можуть призводити до зниження продуктивності через взаємне блокування.</p>"
        },
        {
            "id": 34,
            "question": "Дати визначення та описати моделювання аналізу",
            "answer": "<h2>Дати визначення та описати моделювання аналізу</h2><p><b>Вступ:</b> Моделювання аналізу — це процес створення абстрактного представлення системи для визначення її вимог, функціональності та обмежень. Воно допомагає зрозуміти і зафіксувати очікування замовника.</p><ul><li><b>Визначення:</b> побудова моделей, які відображають логіку роботи системи, її структуру, взаємодії між компонентами та з користувачами.</li><li><b>Цілі моделювання:</b></li><ul><li>Формалізація вимог для уникнення двозначностей.</li><li>Візуалізація системи для полегшення її розуміння учасниками проекту.</li><li>Аналіз можливих ризиків і обмежень.</li></ul><li><b>Основні види моделей:</b></li><ul><li><b>Діаграми прецедентів:</b> показують взаємодію користувачів з системою.</li><li><b>Діаграми класів:</b> описують структуру даних і відносини між об'єктами.</li><li><b>Діаграми активностей:</b> моделюють робочі процеси і потоки дій.</li><li><b>Діаграми послідовностей:</b> описують порядок обміну повідомленнями між об'єктами.</li></ul><li><b>Інструменти:</b> UML, BPMN, CASE-засоби, такі як Enterprise Architect або Visual Paradigm.</li></ul><h3>Висновок:</h3><p>Моделювання аналізу забезпечує систематичний підхід до виявлення і фіксації вимог, сприяє зменшенню ризиків і підвищенню якості проекту, надаючи зрозумілу основу для подальшого проектування та реалізації.</p>"
        },
        {
            "id": 35,
            "question": "Дати визначення та описати модель об'єктної бази даних",
            "answer": "<h2>Дати визначення та описати модель об'єктної бази даних</h2><p><b>Вступ:</b> Модель об'єктної бази даних (ОБД) об'єднує концепції об'єктно-орієнтованого програмування і баз даних. Вона дозволяє зберігати складні об'єкти разом із їх поведінкою, забезпечуючи природну інтеграцію з ООП-системами.</p><ul><li><b>Визначення:</b> ОБД — це база даних, у якій дані представлені у вигляді об'єктів, аналогічно до об'єктів у програмуванні. Кожен об'єкт має атрибути (дані) і методи (поведінку).</li><li><b>Особливості:</b></li><ul><li><b>Ієрархія класів:</b> підтримка наслідування між класами об'єктів.</li><li><b>Методи:</b> збереження процедур і функцій, які можна виконувати на рівні бази даних.</li><li><b>Ідентифікатор об'єкта:</b> унікальний ідентифікатор, що забезпечує доступ до об'єкта незалежно від його місця зберігання.</li></ul><li><b>Переваги:</b></li><ul><li>Підтримка складних типів даних і структур.</li><li>Природна інтеграція з об'єктно-орієнтованими мовами програмування.</li><li>Зменшення розриву між моделлю програмування і базою даних.</li></ul><li><b>Недоліки:</b></li><ul><li>Складність у реалізації та підтримці.</li><li>Обмежена сумісність із традиційними реляційними системами.</li></ul><li><b>Приклади:</b> ObjectDB, db4o, Versant.</li></ul><h3>Висновок:</h3><p>Модель об'єктної бази даних є ефективним рішенням для зберігання і маніпуляції складними даними, забезпечуючи інтеграцію з об'єктно-орієнтованими програмами і підвищуючи ефективність роботи з об'єктами.</p>"
        },
        {
            "id": 36,
            "question": "Дати визначення та описати моделі даних",
            "answer": "<h2>Дати визначення та описати моделі даних</h2><p><b>Вступ:</b> Моделі даних визначають спосіб організації, зберігання і взаємодії з даними в системах управління базами даних. Вони визначають структуру даних, їх взаємозв’язки та правила роботи з ними.</p><ul><li><b>Визначення:</b> модель даних — це абстрактне уявлення про дані, яке включає структури, типи, взаємозв’язки і обмеження для ефективного зберігання і маніпуляції інформацією.</li><li><b>Основні моделі даних:</b></li><ul><li><b>Реляційна модель:</b> дані зберігаються у вигляді таблиць з рядками (записами) і стовпцями (атрибутами). Приклад: MySQL, PostgreSQL.</li><li><b>Об'єктна модель:</b> дані представляються як об'єкти, що мають атрибути і методи, аналогічно до об'єктно-орієнтованого програмування. Приклад: ObjectDB.</li><li><b>Ієрархічна модель:</b> дані організовані у вигляді дерева, де кожен вузол представляє запис, а зв’язки між вузлами — відносини. Приклад: IMS (IBM).</li><li><b>Мережна модель:</b> дані організовані у вигляді графів, де вузли — це записи, а дуги — відносини. Приклад: IDMS (CA).</li><li><b>Документна модель:</b> зберігає дані у форматі документів, таких як JSON, XML. Приклад: MongoDB.</li><li><b>Ключ-значення модель:</b> зберігає дані у вигляді пар «ключ-значення». Приклад: Redis, DynamoDB.</li></ul><li><b>Переваги моделей:</b></li><ul><li>Оптимізація зберігання та доступу до даних.</li><li>Забезпечення інтеграції між компонентами системи.</li></ul><li><b>Недоліки:</b> кожна модель підходить для певних типів задач, але може бути непридатною для інших.</li></ul><h3>Висновок:</h3><p>Моделі даних є основою для організації інформації у базах даних, забезпечуючи ефективне управління та взаємодію з даними, адаптуючись до різних вимог і завдань.</p>"
        },
        {
            "id": 37,
            "question": "Дати визначення та описати моделювання класів",
            "answer": "<h2>Дати визначення та описати моделювання класів</h2><p><b>Вступ:</b> Моделювання класів — це процес створення абстракції об'єктів системи у вигляді класів, які визначають їхні властивості, методи і взаємозв’язки. Воно є основним етапом об’єктно-орієнтованого аналізу і проектування.</p><ul><li><b>Визначення:</b> моделювання класів — це створення діаграм, які відображають структуру даних системи і взаємозв’язки між класами, використовуючи атрибути і методи.</li><li><b>Основні елементи моделювання:</b></li><ul><li><b>Клас:</b> шаблон для об'єктів, що описує їхні властивості (атрибути) і поведінку (методи).</li><li><b>Атрибути:</b> характеристики об'єктів, що зберігають дані.</li><li><b>Методи:</b> операції, які клас може виконувати.</li><li><b>Зв’язки:</b> асоціації, залежності, наслідування або композиції між класами.</li></ul><li><b>Діаграма класів (UML):</b> графічне представлення класів і їхніх зв’язків. Вона показує атрибути, методи і типи зв’язків.</li><li><b>Цілі:</b> моделювання класів дозволяє зрозуміти структуру системи, спростити розробку, забезпечити повторне використання і полегшити підтримку коду.</li><li><b>Інструменти:</b> CASE-засоби, такі як Enterprise Architect, Visual Paradigm, StarUML.</li></ul><h3>Висновок:</h3><p>Моделювання класів є ключовим етапом в об'єктно-орієнтованій розробці, який забезпечує структурований підхід до проектування системи, підвищуючи її масштабованість і підтримуваність.</p>"
        },
        {
            "id": 38,
            "question": "Дати визначення та описати моделювання прецедентів",
            "answer": ""
        },
        {
            "id": 39,
            "question": "Дати визначення та описати моделювання видів діяльності",
            "answer": ""
        },
        {
            "id": 40,
            "question": "Дати визначення та описати динамічну класифікацію і зв'язаність класів зі змішаними екземплярами",
            "answer": ""
        },
        {
            "id": 41,
            "question": "Дати визначення та описати діаграму прецедентів та документування прецедентів",
            "answer": ""
        },
        {
            "id": 42,
            "question": "Дати визначення та описати діаграму видів діяльності",
            "answer": ""
        },
        {
            "id": 43,
            "question": "Дати визначення та описати зв'язності і ув'язуванню класів",
            "answer": ""
        },
        {
            "id": 44,
            "question": "Дати визначення та описати збережені процедури",
            "answer": ""
        },
        {
            "id": 45,
            "question": "Дати визначення та описати закон Деметра",
            "answer": ""
        },
        {
            "id": 46,
            "question": "Дати визначення та описати реляційні таблиці",
            "answer": ""
        },
        {
            "id": 47,
            "question": "Дати визначення та описати рівень постійних об'єктів бази даних",
            "answer": ""
        },
        {
            "id": 48,
            "question": "Дати визначення та описати, як відбувається реалізація Web-додатків",
            "answer": ""
        },
        {
            "id": 50,
            "question": "Дати визначення та описати рівні BCED",
            "answer": ""
        },
        {
            "id": 51,
            "question": "Реінжинирінг бізнес-процесів (BPR) проводить ясне розходження між бізнес-процесом і бізнес-функцією. У чому полягає це розходження?",
            "answer": ""
        },
        {
            "id": 52,
            "question": "Описати, як відбувається виявлення вимог при розробці ПС",
            "answer": ""
        },
        {
            "id": 53,
            "question": "Описати, як відбувається відображення об'єктів у базу даних",
            "answer": ""
        },
        {
            "id": 54,
            "question": "Описати, як відбувається тестування відносно специфікації",
            "answer": ""
        },
        {
            "id": 56,
            "question": "Дати визначення та описати триланковій архітектурі",
            "answer": ""
        },
        {
            "id": 57,
            "question": "Дати визначення та описати традиційні методи виявлення вимог",
            "answer": ""
        },
        {
            "id": 58,
            "question": "Дати визначення та описати комплексний підхід",
            "answer": ""
        },
        {
            "id": 59,
            "question": "Коротко опишіть види блокувань при песимістичному керуванні паралельністю",
            "answer": ""
        },
        {
            "id": 60,
            "question": "Коротко опишіть п'ять рівнів SQL-інтерфейсів",
            "answer": ""
        },
        {
            "id": 61,
            "question": "Дати визначення та описати архітектуру програмного забезпечення",
            "answer": ""
        },
        {
            "id": 62,
            "question": "Дати визначення точці збереження. Як її можна використовувати при проектуванні програми?",
            "answer": ""
        },
        {
            "id": 63,
            "question": "Дати визначення відношенню з'єднання",
            "answer": ""
        },
        {
            "id": 64,
            "question": "Дати визначення триланковій архітектурі У чому її переваги і недоліки?",
            "answer": ""
        },
        {
            "id": 65,
            "question": "Дати визначення домінантному класу",
            "answer": ""
        },
        {
            "id": 66,
            "question": "Назвати дії можливі у відповідь на відправлений запит на зміни",
            "answer": ""
        },
        {
            "id": 67,
            "question": "Назвати, які об'єкти можуть виступати, як цільові об'єкти для повідомлень відповідно до закону Деметра",
            "answer": ""
        },
        {
            "id": 68,
            "question": "Описати, який вплив на проектування роблять принципи, зв'язані зі зв'язаністю та ув'язуванням",
            "answer": ""
        },
        {
            "id": 69,
            "question": "Назвати розходження між об'єктною і реляційною моделлю БД",
            "answer": ""
        },
        {
            "id": 70,
            "question": "Назвати основні причини зрушення від структурного підходу до обʼєктно-орієнтованого проектування",
            "answer": ""
        },
        {
            "id": 71,
            "question": "Назвати принципи встановлення вимог при розробці ПС",
            "answer": ""
        },
        {
            "id": 72,
            "question": "Назвати, чому розуміння методу ISA (архітектура інформаційної системи) важливо для системної розробки",
            "answer": ""
        },
        {
            "id": 73,
            "question": "Дати визначення PMF та описати кроки",
            "answer": ""
        },
        {
            "id": 74,
            "question": "Дати характеристику технічним та нетехнічним фахівцям, що входять в продуктові ІТ-команди",
            "answer": ""
        },
        {
            "id": 75,
            "question": "Описати алгоритм роботи з ІТ-продуктом",
            "answer": ""
        },
        {
            "id": 76,
            "question": "Описати особливості продуктової команди",
            "answer": ""
        },
        {
            "id": 77,
            "question": "Дати визначення продуктовій стратегії та описати стратегію продукту",
            "answer": ""
        },
        {
            "id": 78,
            "question": "Описати пошук ідеї та розробку MVP",
            "answer": ""
        },
        {
            "id": 79,
            "question": "Дати визначення та описати фреймворк RICE",
            "answer": ""
        },
        {
            "id": 80,
            "question": "Описати роботу з даними в продуктовій аналітиці",
            "answer": ""
        },
        {
            "id": 81,
            "question": "Дати визначення метриці, описати види метрик",
            "answer": ""
        },
        {
            "id": 82,
            "question": "Назвати та описати напрямки маркетингу для стрімінгового бізнесу",
            "answer": ""
        },
        {
            "id": 83,
            "question": "Описати метрики для роботи performance-маркетологів",
            "answer": ""
        },
        {
            "id": 84,
            "question": "Назвати та описати інструменти маркетингу в продуктовому ІТ",
            "answer": ""
        },
        {
            "id": 85,
            "question": "Описати принципи, якими користуються розробники для знаходження та утримування користувачів та продаж",
            "answer": ""
          },
          {
            "id": 86,
            "question": "Описати поведінкову модель Браяна Фога",
            "answer": ""
          },
          {
            "id": 87,
            "question": "Дати визначення дизайну і описати види дизайнерів, які є у продуктових компаніях",
            "answer": ""
          },
          {
            "id": 88,
            "question": "Описати методологію Human Centered Design",
            "answer": ""
          },
          {
            "id": 89,
            "question": "Назвати та писати роботу технічних спеціалістів в продуктових командах",
            "answer": ""
          },
          {
            "id": 90,
            "question": "Назвати та писати етапи розвитку продуктової компанії",
            "answer": ""
          },
          {
            "id": 91,
            "question": "Алгоритм створення та розвитку ІТ-продукту",
            "answer": ""
          }
    ]
}