{
    "questions": [
        {
            "id": 1,
            "question": "Описати, як проводиться планування розробки системи",
            "answer": "<h2>Як проводиться планування розробки системи</h2> <ul> <li><b>Формулювання цілей проекту:</b> <ul> <li>Визначення бізнес-завдань, які має вирішити система.</li> <li>Оцінка користувацьких вимог і потреб.</li> </ul> </li> <li><b>Оцінка обсягу робіт:</b> <ul> <li>Розподіл системи на компоненти для спрощення управління.</li> <li>Визначення необхідних ресурсів, включаючи персонал, програмне забезпечення та обладнання.</li> </ul> </li> <li><b>Вибір методології розробки:</b> <ul> <li>Вибір між Agile, Waterfall, Scrum, Kanban або іншими підходами.</li> <li>Визначення інструментів для керування проектом (наприклад, Jira, Trello).</li> </ul> </li> <li><b>Визначення часових рамок (таймлайну):</b> <ul> <li>Складання графіка виконання проекту із зазначенням ключових етапів (міжетапів).</li> <li>Визначення кінцевого терміну реалізації.</li> </ul> </li> <li><b>Управління ризиками:</b> <ul> <li>Виявлення можливих ризиків (технічних, фінансових, часових).</li> <li>Розробка плану зниження ризиків.</li> </ul> </li> <li><b>Розробка бюджету проекту:</b> <ul> <li>Оцінка вартості розробки з урахуванням усіх витрат.</li> <li>Визначення джерел фінансування.</li> </ul> </li> <li><b>Планування командної роботи:</b> <ul> <li>Визначення складу команди, ролей і зон відповідальності.</li> <li>Розподіл завдань між учасниками.</li> </ul> </li> <li><b>Документування плану:</b> <ul> <li>Створення проектної документації, яка включає всі аспекти планування.</li> <li>Затвердження плану зацікавленими сторонами.</li> </ul> </li> <li><b>Моніторинг і контроль:</b> <ul> <li>Визначення механізмів для регулярного відстеження прогресу.</li> <li>Розробка метрик для оцінки виконання плану.</li> </ul> </li> </ul> <h3>Висновок:</h3> <p>Планування розробки системи — це базовий процес, який дозволяє визначити цілі, ресурси, ризики та часові рамки проекту. Завдяки ретельному плануванню забезпечується структурованість розробки, мінімізуються ризики і створюється чітке бачення для всіх учасників проекту.</p> "
        },
        {
            "id": 2,
            "question": "Планування проекту протягом життєвого циклу ПЗ",
            "answer": "<h2>Планування проекту протягом життєвого циклу ПЗ</h2> <ul> <li><b>Етап визначення вимог:</b> <ul> <li>Збір вимог від замовника та користувачів.</li> <li>Аналіз і документування вимог для створення технічного завдання.</li> </ul> </li> <li><b>Етап проектування:</b> <ul> <li>Розробка архітектури системи.</li> <li>Створення моделей і діаграм, що описують функціональність і взаємодії компонентів.</li> </ul> </li> <li><b>Етап реалізації:</b> <ul> <li>Написання програмного коду відповідно до затвердженого дизайну.</li> <li>Інтеграція модулів та забезпечення їхньої сумісності.</li> </ul> </li> <li><b>Етап тестування:</b> <ul> <li>Перевірка відповідності реалізації вимогам.</li> <li>Тестування на різних рівнях: модульному, інтеграційному, системному.</li> </ul> </li> <li><b>Етап впровадження:</b> <ul> <li>Розгортання системи в робочому середовищі.</li> <li>Навчання користувачів та надання технічної підтримки.</li> </ul> </li> <li><b>Етап супроводу:</b> <ul> <li>Виправлення помилок і технічна підтримка системи.</li> <li>Внесення змін і оновлень відповідно до нових вимог.</li> </ul> </li> </ul> <h3>Висновок:</h3> <p>Планування проекту протягом життєвого циклу ПЗ дозволяє чітко організувати процеси розробки, впровадження і підтримки системи. Послідовне виконання кожного етапу забезпечує високу якість і відповідність кінцевого продукту очікуванням користувачів.</p>"
        },
        {
            "id": 3,
            "question": "Описати підхід SWOT",
            "answer": "<h2>Описати підхід SWOT</h2><ul><li><b>SWOT-аналіз:</b> метод оцінки проекту шляхом ідентифікації внутрішніх сильних (Strengths) і слабких (Weaknesses) сторін, а також зовнішніх можливостей (Opportunities) і загроз (Threats).</li><li><b>Сильні сторони:</b> визначення конкурентних переваг, наприклад, досвід команди чи унікальна технологія.</li><li><b>Слабкі сторони:</b> аналіз недоліків, які можуть вплинути на реалізацію, наприклад, недостатній бюджет чи брак знань.</li><li><b>Можливості:</b> пошук зовнішніх факторів, які можуть сприяти успіху, наприклад, нові ринки чи партнерства.</li><li><b>Загрози:</b> аналіз потенційних ризиків, таких як конкуренція, економічні зміни чи технологічні бар’єри.</li></ul><h3>Висновок:</h3><p>SWOT-аналіз є важливим інструментом для стратегічного планування, що допомагає приймати обґрунтовані рішення, розробляючи стратегії використання можливостей і мінімізації ризиків.</p>"
        },
        {
            "id": 4,
            "question": "Проектування клієнт-серверних кооперативних взаємодій",
            "answer": "<h2>Проектування клієнт-серверних кооперативних взаємодій</h2><ul><li><b>Архітектура:</b> побудова системи, де клієнт надсилає запити серверу, а сервер обробляє їх і повертає результати.</li><li><b>Розподіл обов'язків:</b> клієнт відповідає за інтерфейс користувача і введення даних, сервер — за обробку, зберігання і виконання бізнес-логіки.</li><li><b>Комунікація:</b> використання протоколів (наприклад, HTTP, WebSocket) для обміну даними між клієнтом і сервером.</li><li><b>Безпека:</b> забезпечення захищеної передачі даних через шифрування (SSL/TLS) та автентифікацію користувачів.</li><li><b>Масштабованість:</b> проектування системи з можливістю горизонтального або вертикального масштабування серверів для підтримки великої кількості клієнтів.</li></ul><h3>Висновок:</h3><p>Проектування клієнт-серверних взаємодій спрямоване на забезпечення надійного, масштабованого і безпечного зв’язку між компонентами системи, враховуючи їхні ролі та обов'язки.</p>"
        },
        {
            "id": 5,
            "question": "Описати проектування транзакцій",
            "answer": "<h2>Описати проектування транзакцій</h2><ul><li><b>Визначення транзакції:</b> набір операцій, який виконується як єдине ціле, забезпечуючи цілісність даних.</li><li><b>ACID-властивості:</b> транзакції повинні бути атомарними (Atomicity), узгодженими (Consistency), ізольованими (Isolation) і стійкими (Durability).</li><li><b>Проектування механізмів блокування:</b> застосування блокувань для уникнення конфліктів між транзакціями при паралельному доступі до даних.</li><li><b>Обробка помилок:</b> реалізація механізмів відкату (rollback) у разі виникнення помилок або збоїв.</li><li><b>Логування транзакцій:</b> зберігання інформації про виконання транзакцій для відновлення даних у разі аварій.</li></ul><h3>Висновок:</h3><p>Проектування транзакцій забезпечує надійність, цілісність і послідовність даних у системі навіть у випадках збоїв або одночасного виконання декількох транзакцій.</p>"
        },
        {
            "id": 6,
            "question": "Описати програмування баз даних",
            "answer": "<h2>Описати програмування баз даних</h2><ul><li><b>Створення структури:</b> визначення таблиць, полів, індексів і зв’язків між даними.</li><li><b>Робота з мовами запитів:</b> використання SQL для маніпуляцій з даними (вставка, оновлення, видалення, вибірка).</li><li><b>Проектування запитів:</b> оптимізація складних запитів для підвищення продуктивності бази даних.</li><li><b>Забезпечення цілісності даних:</b> використання обмежень (ключі, унікальні значення) для забезпечення правильності даних.</li><li><b>Реалізація процедур і тригерів:</b> написання збережених процедур та автоматизованих тригерів для автоматизації бізнес-логіки.</li><li><b>Інтеграція з додатками:</b> підключення бази даних до програмного забезпечення через API або драйвери (наприклад, JDBC, ODBC).</li></ul><h3>Висновок:</h3><p>Програмування баз даних забезпечує ефективне управління даними, їхню цілісність та інтеграцію з іншими компонентами системи, що є ключовим для роботи сучасних програмних додатків.</p>"
        },
        {
            "id": 7,
            "question": "Описати підхід на основі використання прецедентів",
            "answer": "<h2>Описати підхід на основі використання прецедентів</h2> <p><b>Вступ:</b> Підхід на основі використання прецедентів передбачає моделювання функціональних вимог системи через сценарії взаємодії користувачів із системою. Це дозволяє чітко визначити поведінку системи в конкретних ситуаціях.</p> <ul> <li><b>Визначення прецедентів:</b> опис дій, які система виконує для досягнення певної мети користувача.</li> <li><b>Основні елементи:</b> актори (користувачі або інші системи), прецеденти (сценарії використання) та зв’язки між ними.</li> <li><b>Моделювання:</b> створення діаграм прецедентів, які відображають взаємодії між акторами і системою.</li> <li><b>Переваги:</b> спрощення комунікації між розробниками, аналітиками та замовниками; забезпечення повноти вимог.</li> <li><b>Обмеження:</b> підхід не враховує нефункціональні вимоги, наприклад, продуктивність або безпеку.</li> </ul> <h3>Висновок:</h3> <p>Використання прецедентів дозволяє зосередитися на функціональності системи з точки зору користувачів, що полегшує процес розробки та підвищує відповідність вимогам замовника.</p> "
        },
        {
            "id": 8,
            "question": "Описати підхід на основі використання іменних груп",
            "answer": "<h2>Описати підхід на основі використання іменних груп</h2><p><b>Вступ:</b> Підхід на основі використання іменних груп орієнтований на виявлення сутностей системи шляхом аналізу термінології, що використовується в документах, описах процесів і діалогах з користувачами.</p><ul><li><b>Виявлення іменних груп:</b> аналіз текстів для визначення ключових іменників, які відповідають сутностям предметної області.</li><li><b>Класифікація:</b> групування знайдених іменників за категоріями, такими як об’єкти, дії, події, ролі тощо.</li><li><b>Рефінування:</b> перевірка і уточнення визначених груп через консультації з експертами предметної області.</li><li><b>Переваги:</b> забезпечує чітке розуміння предметної області; спрощує подальше моделювання.</li><li><b>Обмеження:</b> залежність від якості вхідної документації; можливі неоднозначності в інтерпретації термінів.</li></ul><h3>Висновок:</h3><p>Підхід на основі іменних груп допомагає систематизувати знання про предметну область, забезпечуючи основу для проектування системи та її компонентів.</p>"
        },
        {
            "id": 9,
            "question": "Описати підхід на основі використання загальних шаблонів для класів",
            "answer": "<h2>Описати підхід на основі використання загальних шаблонів для класів</h2><p><b>Вступ:</b> Підхід на основі використання загальних шаблонів для класів полягає у створенні базових структур для класів, які можуть бути повторно використані в різних частинах системи. Це сприяє уніфікації, зниженню складності та підвищенню продуктивності розробки.</p><ul><li><b>Визначення загальних шаблонів:</b> формалізація спільних властивостей і методів для групи класів з подібними функціями.</li><li><b>Створення абстракцій:</b> використання базових класів або інтерфейсів для визначення спільних характеристик.</li><li><b>Реалізація:</b> використання механізму наслідування або композиції для створення спеціалізованих класів на основі шаблонів.</li><li><b>Переваги:</b> підвищує повторне використання коду; зменшує кількість помилок через стандартизацію.</li><li><b>Обмеження:</b> складність управління великою кількістю шаблонів; потребує ретельного планування для уникнення надмірного наслідування.</li></ul><h3>Висновок:</h3><p>Підхід на основі загальних шаблонів для класів забезпечує структурований підхід до проектування, знижує дублювання коду та сприяє підтримуваності і масштабованості системи.</p>"
        },
        {
            "id": 10,
            "question": "Дати поняття прототипуванню",
            "answer": "<h2>Дати поняття прототипуванню</h2><p><b>Вступ:</b> Прототипування — це процес створення спрощеної версії системи для демонстрації основної функціональності або перевірки концепції. Воно використовується для валідації ідей, виявлення вимог та оцінки користувацького досвіду на ранніх етапах розробки.</p><ul><li><b>Види прототипів:</b> паперові (скетчі), інтерактивні макети, програмні прототипи.</li><li><b>Етапи створення:</b> збір вимог, розробка прототипу, тестування з користувачами, внесення змін.</li><li><b>Цілі прототипування:</b> виявлення вимог, оцінка користувацького інтерфейсу, перевірка технічної здійсненності.</li><li><b>Переваги:</b> знижує ризики, скорочує витрати на доопрацювання, покращує комунікацію з клієнтами.</li><li><b>Обмеження:</b> прототипи можуть не відображати повну функціональність; ризик залежності від первинної концепції.</li></ul><h3>Висновок:</h3><p>Прототипування є важливим етапом розробки, який дозволяє ітеративно вдосконалювати продукт, забезпечуючи його відповідність потребам користувачів і технічним вимогам.</p>"
        },
        {
            "id": 11,
            "question": "Назвати принципи встановлення вимог",
            "answer": "<h2>Назвати принципи встановлення вимог</h2><p><b>Вступ:</b> Встановлення вимог є ключовим етапом у розробці програмного забезпечення, який забезпечує чітке визначення того, що повинна робити система. Для цього використовуються певні принципи, що сприяють точності, повноті та зрозумілості вимог.</p><ul><li><b>Чіткість і зрозумілість:</b> вимоги повинні бути зрозумілими для всіх зацікавлених сторін, без двозначностей.</li><li><b>Повнота:</b> усі необхідні функції, обмеження та сценарії використання повинні бути задокументовані.</li><li><b>Послідовність:</b> вимоги не повинні суперечити одна одній або вже існуючим специфікаціям.</li><li><b>Перевірюваність:</b> кожну вимогу можна перевірити тестуванням або іншим методом валідації.</li><li><b>Мінімізація припущень:</b> уникати неявних передбачень; кожна вимога має бути чітко визначена.</li><li><b>Пріоритизація:</b> вимоги мають бути розподілені за важливістю для ефективного управління розробкою.</li><li><b>Гнучкість:</b> вимоги повинні мати можливість адаптації до змін у процесі розробки.</li></ul><h3>Висновок:</h3><p>Дотримання принципів встановлення вимог забезпечує створення якісної бази для розробки, мінімізує ризики і сприяє успішному виконанню проекту відповідно до очікувань замовників.</p>"
        },
        {
            "id": 12,
            "question": "Поясніть різницю між етапами визначення вимог і розробки специфікації",
            "answer": "<h2>Поясніть різницю між етапами визначення вимог і розробки специфікації</h2><p><b>Вступ:</b> Етапи визначення вимог і розробки специфікації є взаємопов’язаними, але мають різні цілі та завдання у процесі розробки програмного забезпечення. Вони формують основу для побудови якісної системи.</p><ul><li><b>Визначення вимог:</b> процес збору інформації про потреби користувачів і бізнесу. Цей етап включає інтерв’ю, анкетування, аналіз документації та виявлення функціональних і нефункціональних вимог.</li><li><b>Розробка специфікації:</b> документування вимог у структурованій формі, яка забезпечує чітке розуміння того, як повинна працювати система. Цей документ слугує договором між замовником і розробниками.</li><li><b>Різниця в акценті:</b> етап визначення вимог орієнтований на ідентифікацію потреб, тоді як специфікація фокусується на формалізації цих вимог.</li><li><b>Різниця в результатах:</b> результат визначення вимог — перелік вимог; результат розробки специфікації — формалізований документ (наприклад, SRS — Software Requirements Specification).</li><li><b>Роль у розробці:</b> визначення вимог є базою для створення специфікації, а специфікація — основою для проектування та реалізації.</li></ul><h3>Висновок:</h3><p>Етап визначення вимог відповідає за збір і уточнення потреб, тоді як розробка специфікації забезпечує їх структуроване представлення. Разом вони забезпечують основу для створення якісного програмного продукту.</p>"
        },
        {
            "id": 13,
            "question": "Поясніть взаємозв'язок двох етапів проектування (архітектурне проектування і деталізоване проектування) з першими двома етапами життєвого циклу — етапом визначення вимог і етапом розробки специфікації",
            "answer": "<h2>Поясніть взаємозв'язок двох етапів проектування (архітектурне проектування і деталізоване проектування) з першими двома етапами життєвого циклу — етапом визначення вимог і етапом розробки специфікації</h2><p><b>Вступ:</b> Проектування програмного забезпечення починається з визначення вимог і розробки специфікації. Ці етапи є основою для подальшого проектування, яке включає архітектурне і деталізоване проектування.</p><ul><li><b>Архітектурне проектування:</b> на основі вимог і специфікації створюється загальна структура системи, визначаються основні компоненти, їхні функції та взаємодія між ними. Використовуються принципи модульності, масштабованості та безпеки.</li><li><b>Деталізоване проектування:</b> розробляються детальні моделі та алгоритми для кожного компонента, визначаються дані, які будуть використовуватися, і способи їхньої обробки.</li><li><b>Залежність від вимог:</b> вимоги визначають, що повинна робити система, а специфікація уточнює, як саме це буде реалізовано. Архітектурне проектування забезпечує макет, а деталізоване наповнює його конкретними деталями.</li><li><b>Взаємозв’язок:</b> архітектурне проектування забезпечує основу для деталізованого, а специфікація вимог гарантує, що проектування відповідає очікуванням замовника.</li><li><b>Постійний зворотній зв’язок:</b> уточнення або зміни в специфікації можуть вплинути на обидва етапи проектування.</li></ul><h3>Висновок:</h3><p>Архітектурне і деталізоване проектування нерозривно пов’язані з визначенням вимог і специфікацією, забезпечуючи перехід від бізнес-завдань до технічної реалізації. Цей взаємозв’язок забезпечує відповідність розробки потребам користувачів і бізнесу.</p>"
        },
        {
            "id": 14,
            "question": "Поясніть, у чому складається розходження між розподіленою системою обробки і розподіленою системою баз даних",
            "answer": "<h2>Поясніть, у чому складається розходження між розподіленою системою обробки і розподіленою системою баз даних</h2><p><b>Вступ:</b> Розподілені системи забезпечують розподіл ресурсів і обчислень між кількома вузлами. Однак розподілені системи обробки і баз даних мають різну мету і специфіку реалізації.</p><ul><li><b>Розподілена система обробки:</b> орієнтована на виконання обчислень і розподіл обчислювальних завдань між кількома вузлами для підвищення продуктивності. Приклад: розподілені обчислення в хмарних середовищах.</li><li><b>Розподілена система баз даних:</b> зосереджена на зберіганні даних у кількох вузлах, забезпечуючи доступ, узгодженість і цілісність даних. Приклад: системи реплікації даних або шардінг у базах даних.</li><li><b>Ціль:</b> у системах обробки — прискорення обчислень; у системах баз даних — забезпечення доступності та надійності даних.</li><li><b>Методи реалізації:</b> у системах обробки використовуються механізми розподілу задач і балансування навантаження, тоді як у системах баз даних — реплікація, шардінг та контроль паралельного доступу.</li><li><b>Тип даних:</b> системи обробки працюють з потоками даних у процесі виконання задач, а системи баз даних — з довготривалим зберіганням і маніпуляцією даних.</li></ul><h3>Висновок:</h3><p>Основна різниця між розподіленими системами обробки і баз даних полягає в їхньому призначенні: перші оптимізують обчислення, а другі забезпечують доступність і узгодженість даних. Вони можуть використовуватися разом для створення високопродуктивних і надійних систем.</p>"
        },
        {
            "id": 15,
            "question": "Поясніть, у чому полягають основні розходження чотирьох підходів до виявлення класів",
            "answer": "<h2>Поясніть, у чому полягають основні розходження чотирьох підходів до виявлення класів</h2><p><b>Вступ:</b> Виявлення класів є ключовим етапом об’єктно-орієнтованого аналізу, і для цього застосовуються різні підходи. Кожен із підходів має власний фокус і методологію.</p><ul><li><b>Підхід на основі аналізу предметної області:</b> визначає класи на основі об’єктів реального світу, що стосуються предметної області. Наприклад, клієнт, продукт, замовлення.</li><li><b>Підхід на основі використання сценаріїв:</b> виявляє класи через аналіз сценаріїв використання, зосереджуючись на акторах і їх взаємодії з системою.</li><li><b>Підхід на основі іменних груп:</b> використовує аналіз текстів і документації для виявлення ключових іменників і груп, які можуть стати класами.</li><li><b>Шаблонний підхід:</b> застосовує загальні шаблони проектування, наприклад, «фабрика» або «адаптер», для визначення класів і їхньої взаємодії.</li></ul><h3>Висновок:</h3><p>Кожен підхід до виявлення класів спрямований на спрощення процесу моделювання, враховуючи специфіку проекту. Вибір методу залежить від вимог, предметної області та наявності початкової інформації.</p>"
        },
        {
            "id": 16,
            "question": "Дати поняття CASE-засобам та удосконалюванню процеса",
            "answer": "<h2>Дати поняття CASE-засобам та удосконалюванню процеса</h2><p><b>Вступ:</b> CASE (Computer-Aided Software Engineering) засоби — це програмні інструменти, які підтримують автоматизацію процесів розробки програмного забезпечення, сприяючи підвищенню продуктивності та якості проектів.</p><ul><li><b>Поняття CASE-засобів:</b> програмні рішення, що допомагають автоматизувати завдання аналізу, проектування, тестування, управління конфігураціями та документування.</li><li><b>Класифікація:</b> верхнього рівня (підтримка аналізу та проектування), нижнього рівня (підтримка кодування і тестування) та інтегровані (охоплюють весь життєвий цикл).</li><li><b>Переваги:</b> скорочення часу розробки, зниження ризиків помилок, забезпечення повторного використання коду, підвищення стандартів розробки.</li><li><b>Удосконалення процесу:</b> за допомогою CASE-засобів можна забезпечити безперервне вдосконалення процесів через автоматизацію рутинних завдань, стандартизацію і моніторинг.</li><li><b>Приклади CASE-засобів:</b> Rational Rose, Enterprise Architect, Visual Paradigm.</li></ul><h3>Висновок:</h3><p>CASE-засоби дозволяють оптимізувати розробку програмного забезпечення, автоматизуючи ключові етапи і підвищуючи якість кінцевого продукту. Їх використання сприяє ефективному управлінню та вдосконаленню процесів розробки.</p>"
        },
        {
            "id": 17,
            "question": "Назвати та описати системи для трьох рівнів керування",
            "answer": "<h2>Назвати та описати системи для трьох рівнів керування</h2><p><b>Вступ:</b> У системах керування виділяють три рівні: операційний, тактичний та стратегічний. Кожен рівень має свої особливості та типи інформаційних систем, які підтримують його функції.</p><ul><li><b>Операційний рівень:</b> системи підтримки операційної діяльності (Transaction Processing Systems, TPS). Вони обробляють повсякденні транзакції, наприклад, облік продажів або управління запасами.</li><li><b>Тактичний рівень:</b> системи управлінської інформації (Management Information Systems, MIS). Вони забезпечують аналіз даних і створення звітів для середнього керівництва. Приклад: системи звітності для відстеження виконання планів.</li><li><b>Стратегічний рівень:</b> системи підтримки прийняття рішень (Decision Support Systems, DSS) та виконавчі інформаційні системи (Executive Information Systems, EIS). Вони допомагають приймати довгострокові рішення на основі аналітичних даних і прогнозів. Приклад: системи для аналізу ринку.</li></ul><h3>Висновок:</h3><p>Кожен рівень керування використовує свої інформаційні системи для забезпечення ефективного виконання функцій, від обробки операцій до підтримки стратегічного планування і прийняття рішень.</p>"
        },
        {
            "id": 18,
            "question": "Назвати та описати стратегію повторного використання",
            "answer": "<h2>Назвати та описати стратегію повторного використання</h2><p><b>Вступ:</b> Стратегія повторного використання полягає у зниженні витрат на розробку та підвищенні продуктивності шляхом повторного використання існуючих компонентів, модулів або архітектур у нових проектах.</p><ul><li><b>Програмні бібліотеки:</b> використання готових бібліотек для реалізації поширених функцій, таких як обробка даних чи взаємодія з базами даних.</li><li><b>Шаблони проектування:</b> повторне використання стандартних рішень для типових задач, наприклад, Singleton або Factory.</li><li><b>Компонентно-орієнтоване програмування:</b> створення незалежних компонентів, які можна інтегрувати в різні системи.</li><li><b>Мікросервісна архітектура:</b> розробка сервісів, що виконують конкретні функції, які легко масштабуються і повторно використовуються.</li><li><b>Переваги:</b> зниження витрат і часу розробки, покращення якості через перевірені компоненти, стандартизація.</li><li><b>Недоліки:</b> залежність від сторонніх рішень, можливі труднощі з адаптацією до специфічних потреб проекту.</li></ul><h3>Висновок:</h3><p>Стратегія повторного використання дозволяє значно оптимізувати процес розробки, скорочуючи витрати та час, забезпечуючи при цьому високу якість і стандартизацію програмних рішень.</p>"
        },
        {
            "id": 19,
            "question": "Дати поняття специфікації вимог та описати, як проводиться її розробка",
            "answer": "<h2>Дати поняття специфікації вимог та описати, як проводиться її розробка</h2><p><b>Вступ:</b> Специфікація вимог (Software Requirements Specification, SRS) — це документ, який формалізує всі функціональні та нефункціональні вимоги до програмного забезпечення, забезпечуючи основу для його проектування і розробки.</p><ul><li><b>Поняття специфікації:</b> це структурований опис того, що повинна виконувати система, включаючи функціональність, інтерфейси, продуктивність і обмеження.</li><li><b>Етапи розробки специфікації:</b></li><ul><li><b>Збір вимог:</b> взаємодія із замовниками та користувачами для визначення потреб.</li><li><b>Аналіз вимог:</b> оцінка їхньої повноти, узгодженості та досяжності.</li><li><b>Документування:</b> створення специфікації з використанням зрозумілої мови, схем і діаграм.</li><li><b>Перевірка:</b> забезпечення відповідності документу очікуванням зацікавлених сторін.</li></ul><li><b>Переваги специфікації:</b> забезпечує єдине бачення для команди, зменшує ризик непорозумінь, слугує основою для тестування.</li><li><b>Недоліки:</b> може потребувати багато часу для створення, ризик частих оновлень через зміни вимог.</li></ul><h3>Висновок:</h3><p>Специфікація вимог є ключовим інструментом у розробці програмного забезпечення, забезпечуючи чітке і структуроване уявлення про те, як повинна працювати система, і зменшуючи ризики невідповідності між очікуваннями замовників і результатом.</p>"
        },
        {
            "id": 20,
            "question": "Дати поняття специфікації станів та описати, як проводиться її розробка",
            "answer": "<h2>Дати поняття специфікації станів та описати, як проводиться її розробка</h2><p><b>Вступ:</b> Специфікація станів — це формалізований опис усіх можливих станів системи та умов, за яких відбувається їхній перехід. Вона використовується для моделювання поведінки системи в динамічних сценаріях.</p><ul><li><b>Поняття специфікації станів:</b> опис станів об'єкта чи системи, що змінюються в залежності від подій, дій чи інших факторів.</li><li><b>Етапи розробки специфікації:</b></li><ul><li><b>Ідентифікація станів:</b> визначення всіх можливих станів системи (наприклад, «Активний», «Неактивний»).</li><li><b>Визначення подій:</b> ідентифікація подій, які ініціюють перехід між станами (наприклад, «Користувач увійшов»).</li><li><b>Створення діаграми станів:</b> графічне представлення станів і переходів між ними.</li><li><b>Документування:</b> опис логіки переходів і умов для кожного стану.</li></ul><li><b>Переваги:</b> забезпечує точність у моделюванні поведінки системи; спрощує тестування та налагодження.</li><li><b>Недоліки:</b> складність у великих системах із численними станами; потреба в ретельному аналізі для забезпечення повноти.</li></ul><h3>Висновок:</h3><p>Специфікація станів дозволяє чітко визначити поведінку системи у різних ситуаціях, забезпечуючи її передбачуваність і полегшуючи проектування, тестування та супровід програмного забезпечення.</p>"
        },
        {
            "id": 21,
            "question": "Описати спільну розробку додатків (JAD-метод)",
            "answer": "<h2>Описати спільну розробку додатків (JAD-метод)</h2><p><b>Вступ:</b> JAD (Joint Application Development) — це методологія, що базується на тісній співпраці замовників, користувачів і розробників для швидкої та ефективної розробки вимог і проектування додатків.</p><ul><li><b>Ціль JAD:</b> створення чіткого розуміння вимог до системи шляхом проведення інтерактивних сесій між всіма зацікавленими сторонами.</li><li><b>Ключові елементи JAD:</b></li><ul><li><b>Модератор:</b> відповідає за проведення сесій і забезпечення продуктивності обговорень.</li><li><b>Користувачі:</b> надають інформацію про потреби та очікування від системи.</li><li><b>Аналітики:</b> документують вимоги і проектують систему відповідно до обговореного.</li><li><b>Розробники:</b> надають технічну експертизу для оцінки реалізації вимог.</li></ul><li><b>Процес JAD:</b></li><ul><li><b>Підготовка:</b> визначення цілей, складу учасників та організація сесій.</li><li><b>Сесії JAD:</b> інтерактивні зустрічі для збору, обговорення і уточнення вимог.</li><li><b>Документування:</b> створення специфікації вимог на основі результатів сесій.</li></ul><li><b>Переваги:</b> прискорює процес збору вимог; підвищує залученість користувачів; зменшує ризик непорозумінь.</li><li><b>Недоліки:</b> вимагає значних ресурсів для організації сесій; складність координації великої кількості учасників.</li></ul><h3>Висновок:</h3><p>JAD-метод забезпечує ефективну комунікацію між замовниками, користувачами та розробниками, що дозволяє швидко збирати вимоги та уникати непорозумінь у процесі розробки.</p>"
        },
        {
            "id": 22,
            "question": "Назвати та описати системні сервіси",
            "answer": "<h2>Назвати та описати системні сервіси</h2><p><b>Вступ:</b> Системні сервіси — це базові компоненти операційних систем і програмного забезпечення, які забезпечують виконання ключових функцій для роботи додатків і користувачів. Вони надають інтерфейси для доступу до ресурсів і виконання системних завдань.</p><ul><li><b>Файлові сервіси:</b> надають доступ до файлової системи, забезпечують зберігання, читання, запис і управління файлами.</li><li><b>Мережеві сервіси:</b> підтримують обмін даними між пристроями в мережі, включаючи маршрутизацію, передачу даних і управління з'єднаннями.</li><li><b>Сервіси управління ресурсами:</b> забезпечують управління процесорами, пам'яттю, пристроями введення-виведення та іншими ресурсами системи.</li><li><b>Сервіси безпеки:</b> забезпечують автентифікацію, авторизацію, шифрування даних і управління доступом для захисту системи від несанкціонованого використання.</li><li><b>Сервіси баз даних:</b> надають доступ до управління даними, забезпечуючи їх збереження, запити і транзакції.</li><li><b>Моніторингові сервіси:</b> дозволяють відстежувати стан системи, збирати логи та генерувати звіти про помилки.</li></ul><h3>Висновок:</h3><p>Системні сервіси забезпечують стабільну роботу програмного забезпечення та операційних систем, виконуючи ключові функції для підтримки роботи користувачів і додатків, а також забезпечуючи доступ до ресурсів і захист даних.</p>"
        },
        {
            "id": 23,
            "question": "Назвати та описати етапи життєвого циклу програмного забезпечення",
            "answer": "<h2>Назвати та описати етапи життєвого циклу програмного забезпечення</h2><p><b>Вступ:</b> Життєвий цикл програмного забезпечення (ПЗ) охоплює весь процес розробки, впровадження та підтримки програмного продукту. Він включає послідовність етапів, які забезпечують організовану і ефективну розробку ПЗ.</p><ul><li><b>Визначення вимог:</b> збір, аналіз і документування функціональних та нефункціональних вимог до ПЗ.</li><li><b>Проектування:</b> створення архітектури та деталізованого дизайну системи, включаючи моделі даних і взаємодію компонентів.</li><li><b>Реалізація (кодинг):</b> написання коду відповідно до специфікацій і проекту.</li><li><b>Тестування:</b> перевірка ПЗ на відповідність вимогам і виявлення помилок через модульні, інтеграційні та системні тести.</li><li><b>Впровадження:</b> установка програмного продукту в робоче середовище, навчання користувачів і надання документації.</li><li><b>Експлуатація та супровід:</b> підтримка ПЗ, виправлення помилок, оновлення функціональності та адаптація до нових вимог.</li><li><b>Завершення використання:</b> припинення підтримки продукту, архівація даних і видалення системи, якщо це необхідно.</li></ul><h3>Висновок:</h3><p>Етапи життєвого циклу ПЗ забезпечують структурований підхід до створення програмного продукту, сприяють ефективності розробки, мінімізації ризиків і задоволенню вимог користувачів.</p>"
        },
        {
            "id": 24,
            "question": "Описати етап встановлення вимог",
            "answer": "<h2>Описати етап встановлення вимог</h2><p><b>Вступ:</b> Етап встановлення вимог є початковим і критичним етапом у життєвому циклі програмного забезпечення, під час якого збираються, аналізуються і документуються очікування замовників та користувачів щодо системи.</p><ul><li><b>Збір вимог:</b> використання інтерв’ю, анкетування, аналізу документів і спостереження для виявлення потреб користувачів.</li><li><b>Аналіз вимог:</b> оцінка отриманих вимог на предмет їхньої узгодженості, повноти та здійсненності.</li><li><b>Категоризація:</b> поділ вимог на функціональні (що система повинна робити) та нефункціональні (як вона повинна це робити: продуктивність, безпека тощо).</li><li><b>Пріоритизація:</b> визначення важливості кожної вимоги для оптимізації процесу розробки.</li><li><b>Документування:</b> формалізація вимог у вигляді специфікації вимог (SRS), яка буде основою для подальших етапів.</li><li><b>Перевірка і затвердження:</b> забезпечення того, щоб документовані вимоги відповідали очікуванням зацікавлених сторін.</li></ul><h3>Висновок:</h3><p>Етап встановлення вимог закладає основу для успішної розробки програмного забезпечення, забезпечуючи чітке розуміння цілей проекту і зменшуючи ризик помилок і непорозумінь у майбутньому.</p>"
        },
        {
            "id": 25,
            "question": "Описати етап специфікації вимог",
            "answer": "<h2>Описати етап специфікації вимог</h2><p><b>Вступ:</b> Етап специфікації вимог полягає в створенні детального документа, який формалізує вимоги до програмного забезпечення. Цей документ є основою для проектування, розробки та тестування системи.</p><ul><li><b>Збір інформації:</b> аналіз результатів етапу встановлення вимог для створення структурованого документа.</li><li><b>Структурування вимог:</b> організація вимог у логічному порядку, включаючи функціональні та нефункціональні вимоги.</li><li><b>Формалізація:</b> використання діаграм, моделей і описів для представлення вимог у зрозумілому форматі.</li><li><b>Перевірка:</b> забезпечення узгодженості, повноти і коректності специфікації через перегляд зацікавленими сторонами.</li><li><b>Узгодження:</b> затвердження специфікації замовником, розробниками і тестувальниками для забезпечення єдиного розуміння.</li><li><b>Інструменти:</b> використання CASE-засобів, таких як Rational Rose або Visual Paradigm, для створення і підтримки специфікації.</li></ul><h3>Висновок:</h3><p>Етап специфікації вимог забезпечує створення детального і зрозумілого опису системи, який служить базою для всіх наступних етапів розробки, зменшуючи ризик помилок і непорозумінь.</p>"
        },
        {
            "id": 26,
            "question": "Описати етап проектування архітектури",
            "answer": "<h2>Описати етап проектування архітектури</h2><p><b>Вступ:</b> Етап проектування архітектури полягає у створенні високорівневої структури системи, що визначає основні компоненти, їхні функції та взаємодії. Це критичний етап, який формує основу для подальшого деталізованого проектування і розробки.</p><ul><li><b>Визначення архітектурного стилю:</b> вибір підходу до побудови системи, наприклад, клієнт-серверна архітектура, мікросервісна архітектура, багатошарова архітектура тощо.</li><li><b>Декомпозиція системи:</b> розподіл системи на компоненти з чітко визначеними ролями і відповідальністю.</li><li><b>Визначення взаємодій:</b> проектування способів комунікації між компонентами через API, повідомлення або спільні дані.</li><li><b>Вибір технологій:</b> визначення інструментів і платформ для реалізації компонентів, таких як бази даних, сервери додатків або протоколи зв’язку.</li><li><b>Забезпечення нефункціональних вимог:</b> врахування аспектів продуктивності, безпеки, масштабованості, надійності та інших характеристик.</li><li><b>Документування:</b> створення архітектурних діаграм і описів, що детально описують компоненти, їхні функції та взаємодії.</li></ul><h3>Висновок:</h3><p>Етап проектування архітектури забезпечує структуровану основу для побудови системи, визначаючи її компоненти, їхні взаємодії і технології, що дозволяє ефективно реалізувати вимоги і забезпечити масштабованість і надійність програмного продукту.</p>"
        },
        {
            "id": 27,
            "question": "Описати етап деталізованого проектування",
            "answer": "<h2>Описати етап деталізованого проектування</h2><p><b>Вступ:</b> Етап деталізованого проектування полягає в розробці детальних специфікацій для кожного компонента системи, визначеного на етапі архітектурного проектування. Це забезпечує готовність до реалізації і знижує ризики помилок під час розробки.</p><ul><li><b>Декомпозиція компонентів:</b> розподіл кожного архітектурного компонента на дрібніші підкомпоненти або модулі.</li><li><b>Розробка алгоритмів:</b> створення алгоритмів і логіки для реалізації функціональності кожного модуля.</li><li><b>Проектування баз даних:</b> визначення структури таблиць, зв’язків, ключів, індексів і транзакцій для роботи з даними.</li><li><b>Інтерфейси модулів:</b> визначення API для взаємодії між модулями, включаючи входи, виходи і типи даних.</li><li><b>Документування:</b> створення детальних схем, діаграм класів, послідовностей і станів для опису логіки та взаємодій.</li><li><b>Забезпечення відповідності вимогам:</b> перевірка кожного модуля на відповідність функціональним і нефункціональним вимогам.</li></ul><h3>Висновок:</h3><p>Етап деталізованого проектування є мостом між архітектурою системи та її реалізацією, забезпечуючи детальний план для розробників і гарантуючи відповідність вимогам і архітектурним принципам.</p>"
        },
        {
            "id": 28,
            "question": "Описати етап реалізації",
            "answer": "<h2>Описати етап реалізації</h2><p><b>Вступ:</b> Етап реалізації — це процес перетворення проектної документації на програмний код. Цей етап передбачає написання, тестування і інтеграцію коду для створення робочого програмного продукту.</p><ul><li><b>Написання коду:</b> реалізація функціональності системи згідно з деталізованим проектуванням, використовуючи вибрані мови програмування і середовища розробки.</li><li><b>Використання стандартів:</b> дотримання стандартів кодування для забезпечення читабельності, повторного використання і підтримуваності коду.</li><li><b>Інтеграція компонентів:</b> з’єднання окремих модулів у єдину систему і перевірка їхньої сумісності.</li><li><b>Тестування коду:</b> проведення модульного тестування для перевірки правильності реалізації окремих функцій.</li><li><b>Контроль версій:</b> використання інструментів для управління версіями коду (наприклад, Git) для відстеження змін і забезпечення співпраці команди.</li><li><b>Документування:</b> створення технічної документації для коду, включаючи коментарі, інструкції для користувачів і адміністративні гайди.</li></ul><h3>Висновок:</h3><p>Етап реалізації є ключовим для перетворення проекту в готовий програмний продукт. Його успішне виконання залежить від точності дотримання специфікацій, стандартів кодування і ретельного тестування.</p>"
        },
        {
            "id": 29,
            "question": "Назвати та описати елементарні типи моделі РБД",
            "answer": "<h2>Назвати та описати елементарні типи моделі РБД</h2><p><b>Вступ:</b> Реляційна база даних (РБД) базується на використанні таблиць для зберігання і маніпуляції даними. Елементарні типи моделі РБД визначають основні структурні компоненти, які формують таблиці.</p><ul><li><b>Сутність (Entity):</b> основна таблиця, яка представляє об’єкти або поняття з реального світу. Кожен рядок (запис) відповідає окремій сутності, а стовпці — її атрибутам.</li><li><b>Атрибут (Attribute):</b> стовпці таблиці, які визначають властивості або характеристики сутності. Наприклад, ім’я, адреса або дата народження.</li><li><b>Ключ (Key):</b> унікальний ідентифікатор запису. Основний ключ (Primary Key) забезпечує унікальність кожного запису в таблиці.</li><li><b>Зв’язок (Relationship):</b> визначає асоціації між сутностями, представленими через зовнішні ключі (Foreign Key), що вказують на записи інших таблиць.</li><li><b>Домен (Domain):</b> набір допустимих значень для атрибуту, наприклад, типи даних або обмеження.</li><li><b>Обмеження (Constraint):</b> правила, які забезпечують цілісність даних, наприклад, обмеження на унікальність, не-null значення або перевірки значень.</li></ul><h3>Висновок:</h3><p>Елементарні типи моделі РБД є основою для структурування та організації даних у реляційних базах даних. Вони забезпечують логічну і зрозумілу організацію інформації та підтримують її цілісність.</p>"
        },
        {
            "id": 30,
            "question": "Назвати основи об'єктної технології",
            "answer": "<h2>Назвати основи об'єктної технології</h2><p><b>Вступ:</b> Об'єктна технологія — це підхід до розробки програмного забезпечення, який базується на концепції об'єктів, що поєднують дані і методи для роботи з ними. Вона є основою об'єктно-орієнтованого програмування (ООП).</p><ul><li><b>Інкапсуляція:</b> принцип приховування реалізації об'єкта та надання доступу до його даних і методів через чітко визначений інтерфейс.</li><li><b>Поліморфізм:</b> здатність об'єктів різних класів відповідати на однакові повідомлення по-різному, забезпечуючи гнучкість і повторне використання коду.</li><li><b>Наслідування:</b> можливість створення нових класів на основі вже існуючих, що дозволяє повторно використовувати код і розширювати його функціональність.</li><li><b>Абстракція:</b> процес виділення суттєвих характеристик об'єкта, ігноруючи несуттєві деталі, для створення узагальненої моделі.</li><li><b>Об'єкти:</b> основні елементи, які мають стан (дані) і поведінку (методи) і взаємодіють між собою через повідомлення.</li><li><b>Класи:</b> шаблони для створення об'єктів, що визначають їхню структуру і поведінку.</li><li><b>Модульність:</b> принцип розділення системи на незалежні модулі (класи або об'єкти), що сприяє її зрозумілості, підтримуваності і повторному використанню.</li></ul><h3>Висновок:</h3><p>Основи об'єктної технології забезпечують потужний і гнучкий підхід до розробки програмного забезпечення, спрямований на підвищення ефективності, повторного використання коду і його масштабованості.</p>"
        },
        {
            "id": 31,
            "question": "Дати визначення та описати об'єктно-реляційну модель бази даних",
            "answer": "<h2>Дати визначення та описати об'єктно-реляційну модель бази даних</h2><p><b>Вступ:</b> Об'єктно-реляційна модель бази даних (ОРМБД) поєднує концепції об'єктно-орієнтованого програмування (ООП) з реляційною моделлю бази даних, забезпечуючи збереження складних об'єктів у реляційній структурі.</p><ul><li><b>Визначення:</b> модель даних, яка дозволяє зберігати об'єкти з їх атрибутами, методами та ієрархіями в реляційних таблицях бази даних.</li><li><b>Основні особливості:</b></li><ul><li><b>Розширені типи даних:</b> підтримка складних типів, таких як масиви, XML, JSON, та об'єкти.</li><li><b>Наслідування:</b> можливість зберігати ієрархії класів за допомогою реляційних таблиць.</li><li><b>Інкапсуляція:</b> підтримка збережених процедур і тригерів для реалізації поведінки об'єктів.</li></ul><li><b>Переваги:</b> забезпечує більшу гнучкість у роботі зі складними структурами даних, знижує розрив між об'єктною моделлю програмування і реляційною моделлю бази даних.</li><li><b>Недоліки:</b> більша складність у налаштуванні та використанні порівняно з традиційними реляційними базами даних.</li><li><b>Приклади СУБД:</b> PostgreSQL, Oracle Database, DB2.</li></ul><h3>Висновок:</h3><p>Об'єктно-реляційна модель бази даних є ефективним інструментом для зберігання та управління складними структурами даних, забезпечуючи поєднання об'єктно-орієнтованих і реляційних підходів у розробці програмного забезпечення.</p>"
        },
        {
            "id": 32,
            "question": "Описати види блокувань при песимістичному керуванні паралельністю",
            "answer": "<h2>Описати види блокувань при песимістичному керуванні паралельністю</h2><p><b>Вступ:</b> Песимістичне керування паралельністю використовує блокування для запобігання конфліктам при одночасному доступі до даних. Це забезпечує узгодженість даних, але може знижувати продуктивність через очікування.</p><ul><li><b>Ексклюзивне блокування (Exclusive Lock):</b> забороняє будь-який доступ до ресурсу, окрім поточного процесу. Використовується при записі даних.</li><li><b>Поділюване блокування (Shared Lock):</b> дозволяє кільком транзакціям читати дані одночасно, але блокує запис.</li><li><b>Рекурсивне блокування (Recursive Lock):</b> дозволяє одній транзакції кілька разів блокувати той самий ресурс без виникнення конфліктів.</li><li><b>Блокування з намірами (Intent Lock):</b> інформує систему про намір транзакції заблокувати ресурс, забезпечуючи координацію між блокуваннями на рівнях таблиць і записів.</li><li><b>Читання-запис блокування (Read-Write Lock):</b> розділяє доступ до ресурсу на два типи: для читання або запису, що знижує конфлікти.</li></ul><h3>Висновок:</h3><p>Види блокувань при песимістичному керуванні паралельністю дозволяють ефективно запобігати конфліктам між транзакціями, забезпечуючи узгодженість даних, але можуть призводити до зниження продуктивності через взаємне блокування.</p>"
        },
        {
            "id": 33,
            "question": "Дати визначення та описати моделювання аналізу",
            "answer": "<h2>Дати визначення та описати моделювання аналізу</h2><p><b>Вступ:</b> Моделювання аналізу — це процес створення абстрактного представлення системи для визначення її вимог, функціональності та обмежень. Воно допомагає зрозуміти і зафіксувати очікування замовника.</p><ul><li><b>Визначення:</b> побудова моделей, які відображають логіку роботи системи, її структуру, взаємодії між компонентами та з користувачами.</li><li><b>Цілі моделювання:</b></li><ul><li>Формалізація вимог для уникнення двозначностей.</li><li>Візуалізація системи для полегшення її розуміння учасниками проекту.</li><li>Аналіз можливих ризиків і обмежень.</li></ul><li><b>Основні види моделей:</b></li><ul><li><b>Діаграми прецедентів:</b> показують взаємодію користувачів з системою.</li><li><b>Діаграми класів:</b> описують структуру даних і відносини між об'єктами.</li><li><b>Діаграми активностей:</b> моделюють робочі процеси і потоки дій.</li><li><b>Діаграми послідовностей:</b> описують порядок обміну повідомленнями між об'єктами.</li></ul><li><b>Інструменти:</b> UML, BPMN, CASE-засоби, такі як Enterprise Architect або Visual Paradigm.</li></ul><h3>Висновок:</h3><p>Моделювання аналізу забезпечує систематичний підхід до виявлення і фіксації вимог, сприяє зменшенню ризиків і підвищенню якості проекту, надаючи зрозумілу основу для подальшого проектування та реалізації.</p>"
        },
        {
            "id": 34,
            "question": "Дати визначення та описати модель об'єктної бази даних",
            "answer": "<h2>Дати визначення та описати модель об'єктної бази даних</h2><p><b>Вступ:</b> Модель об'єктної бази даних (ОБД) об'єднує концепції об'єктно-орієнтованого програмування і баз даних. Вона дозволяє зберігати складні об'єкти разом із їх поведінкою, забезпечуючи природну інтеграцію з ООП-системами.</p><ul><li><b>Визначення:</b> ОБД — це база даних, у якій дані представлені у вигляді об'єктів, аналогічно до об'єктів у програмуванні. Кожен об'єкт має атрибути (дані) і методи (поведінку).</li><li><b>Особливості:</b></li><ul><li><b>Ієрархія класів:</b> підтримка наслідування між класами об'єктів.</li><li><b>Методи:</b> збереження процедур і функцій, які можна виконувати на рівні бази даних.</li><li><b>Ідентифікатор об'єкта:</b> унікальний ідентифікатор, що забезпечує доступ до об'єкта незалежно від його місця зберігання.</li></ul><li><b>Переваги:</b></li><ul><li>Підтримка складних типів даних і структур.</li><li>Природна інтеграція з об'єктно-орієнтованими мовами програмування.</li><li>Зменшення розриву між моделлю програмування і базою даних.</li></ul><li><b>Недоліки:</b></li><ul><li>Складність у реалізації та підтримці.</li><li>Обмежена сумісність із традиційними реляційними системами.</li></ul><li><b>Приклади:</b> ObjectDB, db4o, Versant.</li></ul><h3>Висновок:</h3><p>Модель об'єктної бази даних є ефективним рішенням для зберігання і маніпуляції складними даними, забезпечуючи інтеграцію з об'єктно-орієнтованими програмами і підвищуючи ефективність роботи з об'єктами.</p>"
        },
        {
            "id": 35,
            "question": "Дати визначення та описати моделі даних",
            "answer": "<h2>Дати визначення та описати моделі даних</h2><p><b>Вступ:</b> Моделі даних визначають спосіб організації, зберігання і взаємодії з даними в системах управління базами даних. Вони визначають структуру даних, їх взаємозв’язки та правила роботи з ними.</p><ul><li><b>Визначення:</b> модель даних — це абстрактне уявлення про дані, яке включає структури, типи, взаємозв’язки і обмеження для ефективного зберігання і маніпуляції інформацією.</li><li><b>Основні моделі даних:</b></li><ul><li><b>Реляційна модель:</b> дані зберігаються у вигляді таблиць з рядками (записами) і стовпцями (атрибутами). Приклад: MySQL, PostgreSQL.</li><li><b>Об'єктна модель:</b> дані представляються як об'єкти, що мають атрибути і методи, аналогічно до об'єктно-орієнтованого програмування. Приклад: ObjectDB.</li><li><b>Ієрархічна модель:</b> дані організовані у вигляді дерева, де кожен вузол представляє запис, а зв’язки між вузлами — відносини. Приклад: IMS (IBM).</li><li><b>Мережна модель:</b> дані організовані у вигляді графів, де вузли — це записи, а дуги — відносини. Приклад: IDMS (CA).</li><li><b>Документна модель:</b> зберігає дані у форматі документів, таких як JSON, XML. Приклад: MongoDB.</li><li><b>Ключ-значення модель:</b> зберігає дані у вигляді пар «ключ-значення». Приклад: Redis, DynamoDB.</li></ul><li><b>Переваги моделей:</b></li><ul><li>Оптимізація зберігання та доступу до даних.</li><li>Забезпечення інтеграції між компонентами системи.</li></ul><li><b>Недоліки:</b> кожна модель підходить для певних типів задач, але може бути непридатною для інших.</li></ul><h3>Висновок:</h3><p>Моделі даних є основою для організації інформації у базах даних, забезпечуючи ефективне управління та взаємодію з даними, адаптуючись до різних вимог і завдань.</p>"
        },
        {
            "id": 36,
            "question": "Дати визначення та описати моделювання класів",
            "answer": "<h2>Дати визначення та описати моделювання класів</h2><p><b>Вступ:</b> Моделювання класів — це процес створення абстракції об'єктів системи у вигляді класів, які визначають їхні властивості, методи і взаємозв’язки. Воно є основним етапом об’єктно-орієнтованого аналізу і проектування.</p><ul><li><b>Визначення:</b> моделювання класів — це створення діаграм, які відображають структуру даних системи і взаємозв’язки між класами, використовуючи атрибути і методи.</li><li><b>Основні елементи моделювання:</b></li><ul><li><b>Клас:</b> шаблон для об'єктів, що описує їхні властивості (атрибути) і поведінку (методи).</li><li><b>Атрибути:</b> характеристики об'єктів, що зберігають дані.</li><li><b>Методи:</b> операції, які клас може виконувати.</li><li><b>Зв’язки:</b> асоціації, залежності, наслідування або композиції між класами.</li></ul><li><b>Діаграма класів (UML):</b> графічне представлення класів і їхніх зв’язків. Вона показує атрибути, методи і типи зв’язків.</li><li><b>Цілі:</b> моделювання класів дозволяє зрозуміти структуру системи, спростити розробку, забезпечити повторне використання і полегшити підтримку коду.</li><li><b>Інструменти:</b> CASE-засоби, такі як Enterprise Architect, Visual Paradigm, StarUML.</li></ul><h3>Висновок:</h3><p>Моделювання класів є ключовим етапом в об'єктно-орієнтованій розробці, який забезпечує структурований підхід до проектування системи, підвищуючи її масштабованість і підтримуваність.</p>"
        },
        {
            "id": 37,
            "question": "Дати визначення та описати моделювання прецедентів",
            "answer": "<h2>Дати визначення та описати моделювання прецедентів</h2><p><b>Вступ:</b> Моделювання прецедентів — це процес створення моделей, які відображають функціональні вимоги системи у вигляді сценаріїв взаємодії користувачів із системою. Воно допомагає виявити функціональні можливості та межі системи.</p><ul><li><b>Визначення:</b> моделювання прецедентів — це створення діаграм, які демонструють взаємодію акторів (користувачів або зовнішніх систем) із функціями системи (прецедентами).</li><li><b>Основні елементи:</b></li><ul><li><b>Актори:</b> зовнішні суб’єкти, які взаємодіють із системою (користувачі, інші системи).</li><li><b>Прецеденти:</b> функціональні можливості системи, представлені у вигляді сценаріїв використання.</li><li><b>Зв’язки:</b> асоціації між акторами і прецедентами, розширення (extend) або включення (include) функціональності.</li></ul><li><b>Діаграма прецедентів (UML):</b> графічне представлення взаємодії акторів із системою. Вона показує, хто взаємодіє із системою і як.</li><li><b>Процес моделювання:</b></li><ul><li>Ідентифікація акторів і прецедентів.</li><li>Визначення зв’язків між ними.</li><li>Створення діаграми з використанням UML.</li></ul><li><b>Переваги:</b> полегшує комунікацію між командою і замовником; чітко визначає функціональні вимоги; забезпечує основу для тестування.</li><li><b>Інструменти:</b> CASE-засоби, такі як Enterprise Architect, Visual Paradigm, StarUML.</li></ul><h3>Висновок:</h3><p>Моделювання прецедентів допомагає виявити та формалізувати функціональні вимоги до системи, забезпечуючи ясність і узгодженість у процесі розробки.</p>"
        },
        {
            "id": 38,
            "question": "Дати визначення та описати моделювання видів діяльності",
            "answer": "<h2>Дати визначення та описати моделювання видів діяльності</h2><p><b>Вступ:</b> Моделювання видів діяльності — це процес створення моделей, які відображають послідовність дій або процесів у системі. Це дозволяє описати робочі потоки та їхню взаємодію між учасниками чи компонентами.</p><ul><li><b>Визначення:</b> моделювання видів діяльності — це створення діаграм, які показують логіку виконання процесів або робочих потоків у системі, відображаючи їхні етапи, рішення та взаємодії.</li><li><b>Основні елементи:</b></li><ul><li><b>Дії (Activity):</b> окремі етапи або задачі, що виконуються в рамках процесу.</li><li><b>Потоки (Flow):</b> послідовність виконання дій, яка може бути прямолінійною або містити розгалуження.</li><li><b>Рішення (Decision):</b> точки, де вибір визначає подальший потік роботи.</li><li><b>Початкові та кінцеві стани:</b> визначають, з чого починається і чим завершується процес.</li></ul><li><b>Діаграма активностей (UML):</b> графічне представлення процесу, яке показує послідовність виконання дій, рішення, паралельність та завершення.</li><li><b>Процес моделювання:</b></li><ul><li>Ідентифікація дій і їхньої послідовності.</li><li>Визначення умов і рішень, що впливають на потоки.</li><li>Створення діаграми з використанням UML або BPMN.</li></ul><li><b>Переваги:</b> покращує розуміння робочих процесів; забезпечує основу для автоматизації; полегшує оптимізацію процесів.</li><li><b>Інструменти:</b> CASE-засоби, такі як Visual Paradigm, Lucidchart, Enterprise Architect.</li></ul><h3>Висновок:</h3><p>Моделювання видів діяльності дозволяє описати, візуалізувати і оптимізувати робочі процеси, забезпечуючи чітке розуміння їхньої логіки та взаємодій між компонентами або учасниками системи.</p>"
        },
        {
            "id": 39,
            "question": "Дати визначення та описати динамічну класифікацію і зв'язаність класів зі змішаними екземплярами",
            "answer": "<h2>Дати визначення та описати динамічну класифікацію і зв’язаність класів зі змішаними екземплярами</h2><p><b>Вступ:</b> Динамічна класифікація і зв’язаність класів зі змішаними екземплярами стосуються управління об'єктами, які можуть належати до різних класів або змінювати свою класифікацію в процесі виконання програми.</p><ul><li><b>Динамічна класифікація:</b> можливість об'єкта змінювати свій клас під час виконання програми. Це дозволяє системі адаптуватися до змін у середовищі або контексті роботи.</li><li><b>Змішані екземпляри:</b> об'єкти, які одночасно належать до кількох класів, реалізуючи властивості і методи від кожного з них. Це часто досягається за допомогою множинного успадкування або інтерфейсів.</li><li><b>Особливості:</b></li><ul><li>Забезпечує гнучкість у роботі з об'єктами.</li><li>Дозволяє створювати складні системи, де об'єкти можуть змінювати поведінку залежно від контексту.</li></ul><li><b>Реалізація:</b> використовуються механізми мови програмування, наприклад, зміна класу в Python через `__class__`, або застосування шаблонів, таких як стратегія або стан.</li><li><b>Переваги:</b></li><ul><li>Гнучкість у моделюванні складних систем.</li><li>Ефективне управління поведінкою об'єктів.</li></ul><li><b>Недоліки:</b></li><ul><li>Складність у підтримці і тестуванні.</li><li>Підвищений ризик помилок через динамічну зміну поведінки об'єктів.</li></ul></ul><h3>Висновок:</h3><p>Динамічна класифікація і зв’язаність класів зі змішаними екземплярами забезпечують потужний інструмент для створення гнучких і адаптивних систем, але вимагають обережного підходу для уникнення складності і помилок у реалізації.</p>"
        },
        {
            "id": 40,
            "question": "Дати визначення та описати діаграму прецедентів та документування прецедентів",
            "answer": "<h2>Дати визначення та описати діаграму прецедентів та документування прецедентів</h2><p><b>Вступ:</b> Діаграма прецедентів — це графічне представлення функціональних вимог до системи, яке демонструє взаємодію між акторами (користувачами чи іншими системами) і прецедентами (сценаріями використання). Документування прецедентів описує їх деталі у текстовій формі.</p><ul><li><b>Визначення:</b> діаграма прецедентів (Use Case Diagram) в UML відображає сценарії використання системи, показуючи, хто і як буде взаємодіяти з функціональністю системи.</li><li><b>Елементи діаграми:</b></li><ul><li><b>Актори:</b> зовнішні користувачі або системи, які взаємодіють із системою.</li><li><b>Прецеденти:</b> функціональні можливості системи, представлені у вигляді еліпсів.</li><li><b>Зв’язки:</b> асоціації між акторами і прецедентами; розширення (extend) і включення (include).</li></ul><li><b>Документування прецедентів:</b></li><ul><li>Кожен прецедент документується текстово, з описом його цілі, передумов, основного і альтернативного сценаріїв виконання.</li><li>Структура документації:</li><ul><li><b>Назва прецеденту:</b> короткий опис функції.</li><li><b>Мета:</b> що має бути досягнуто.</li><li><b>Актори:</b> хто взаємодіє із системою.</li><li><b>Передумови:</b> умови, які мають бути виконані перед початком сценарію.</li><li><b>Основний сценарій:</b> покроковий опис взаємодії.</li><li><b>Альтернативні сценарії:</b> варіанти виконання за різних умов.</li></ul></ul><li><b>Переваги:</b> покращує розуміння функціональних вимог; забезпечує чітку комунікацію між командою розробників і замовниками.</li><li><b>Інструменти:</b> CASE-засоби, такі як Enterprise Architect, Visual Paradigm, Lucidchart.</li></ul><h3>Висновок:</h3><p>Діаграма прецедентів і документування прецедентів є основними засобами для опису функціональних вимог до системи, забезпечуючи ясність і чіткість у їхньому визначенні та комунікації між учасниками проекту.</p>"
        },
        {
            "id": 41,
            "question": "Дати визначення та описати діаграму видів діяльності",
            "answer": "<h2>Дати визначення та описати діаграму видів діяльності</h2><p><b>Вступ:</b> Діаграма видів діяльності — це інструмент UML, що описує потоки виконання дій або процесів у системі. Вона допомагає моделювати робочі процеси, визначати їхню послідовність і взаємодію між компонентами або учасниками.</p><ul><li><b>Визначення:</b> діаграма видів діяльності (Activity Diagram) відображає логіку виконання дій, робочі процеси та їхні залежності, використовуючи графічне представлення потоків управління і даних.</li><li><b>Основні елементи:</b></li><ul><li><b>Дія (Activity):</b> основна одиниця роботи, яка виконується в процесі.</li><li><b>Потік (Flow):</b> зв’язок між діями, що визначає їхню послідовність.</li><li><b>Рішення (Decision Node):</b> точка вибору, яка визначає, який шлях обрати залежно від умов.</li><li><b>Паралельність (Fork/Join):</b> точка розподілу або об’єднання паралельних потоків.</li><li><b>Початковий і кінцевий стан:</b> початок і завершення робочого процесу.</li></ul><li><b>Процес створення діаграми:</b></li><ul><li>Визначення дій і їхньої послідовності.</li><li>Визначення умовних переходів і рішень.</li><li>Додавання початкового і кінцевого станів.</li><li>Створення діаграми за допомогою UML-інструментів.</li></ul><li><b>Переваги:</b> полегшує розуміння складних процесів; використовується для аналізу і оптимізації робочих потоків; підтримує автоматизацію.</li><li><b>Інструменти:</b> Visual Paradigm, Lucidchart, Enterprise Architect.</li></ul><h3>Висновок:</h3><p>Діаграма видів діяльності є ефективним інструментом для візуалізації і аналізу робочих процесів, що допомагає зрозуміти їхню структуру і взаємодії, а також знайти можливості для оптимізації.</p>"
        },
        {
            "id": 42,
            "question": "Дати визначення та описати зв'язності і ув'язуванню класів",
            "answer": "<h2>Дати визначення та описати зв'язності і ув'язування класів</h2><p><b>Вступ:</b> Зв'язність і ув'язування класів є ключовими концепціями об'єктно-орієнтованого програмування, що визначають відносини між класами та ступінь їхньої залежності. Це впливає на гнучкість, повторне використання і підтримку коду.</p><ul><li><b>Зв'язність (Cohesion):</b> міра, яка визначає, наскільки елементи всередині класу пов'язані один з одним і працюють разом для виконання однієї задачі. Висока зв'язність вказує на добре спроєктований клас.</li><li><b>Типи зв'язності:</b></li><ul><li><b>Функціональна:</b> усі методи класу працюють над спільними даними для досягнення однієї мети.</li><li><b>Послідовна:</b> вихід одного методу використовується як вхід для іншого.</li></ul><li><b>Ув'язування (Coupling):</b> міра залежності одного класу від іншого. Низьке ув'язування є бажаним, оскільки воно знижує залежності і спрощує зміни в коді.</li><li><b>Типи ув'язування:</b></li><ul><li><b>Тісне:</b> класи сильно залежать один від одного, що ускладнює їхнє тестування і зміну.</li><li><b>Слабке:</b> класи мають мінімальні залежності, що забезпечує гнучкість і легкість в обслуговуванні.</li></ul><li><b>Рекомендації:</b> прагнути до високої зв'язності всередині класів і слабкого ув'язування між класами для досягнення кращої архітектури системи.</li></ul><h3>Висновок:</h3><p>Зв'язність і ув'язування класів є важливими характеристиками, які визначають якість дизайну програмного забезпечення. Висока зв'язність і низьке ув'язування сприяють створенню структурованих, гнучких і легко підтримуваних систем.</p>"
        },
        {
            "id": 43,
            "question": "Дати визначення та описати збережені процедури",
            "answer": "<h2>Дати визначення та описати збережені процедури</h2><p><b>Вступ:</b> Збережені процедури — це попередньо компільовані програми, що зберігаються і виконуються безпосередньо в базі даних. Вони використовуються для автоматизації повторюваних задач, підвищення продуктивності та забезпечення узгодженості даних.</p><ul><li><b>Визначення:</b> збережена процедура — це набір SQL-запитів і логіки (умови, цикли), що зберігаються на сервері бази даних і викликаються за допомогою імені.</li><li><b>Особливості:</b></li><ul><li>Містить параметри входу і виходу для гнучкої взаємодії.</li><li>Підтримує контроль потоку (цикли, умови).</li><li>Забезпечує швидкість виконання завдяки попередній компіляції.</li></ul><li><b>Переваги:</b></li><ul><li><b>Підвищення продуктивності:</b> скорочення часу виконання запитів через збережену компіляцію.</li><li><b>Безпека:</b> приховує складну логіку і доступ до бази даних через обмежений інтерфейс.</li><li><b>Узгодженість:</b> зменшує ризик помилок через повторне використання одного і того ж коду.</li></ul><li><b>Недоліки:</b></li><ul><li>Складність у підтримці та налагодженні.</li><li>Обмеження гнучкості у разі складних бізнес-логік.</li></ul><li><b>Приклади використання:</b></li><ul><li>Автоматизація обробки транзакцій.</li><li>Генерація складних звітів.</li><li>Валідація даних перед вставкою або оновленням.</li></ul></ul><h3>Висновок:</h3><p>Збережені процедури є потужним інструментом для роботи з базами даних, який забезпечує продуктивність, безпеку і стандартизацію бізнес-логіки, але потребує ретельного проектування для уникнення труднощів у підтримці.</p>"
        },
        {
            "id": 44,
            "question": "Дати визначення та описати закон Деметра",
            "answer": "<h2>Дати визначення та описати закон Деметри</h2><p><b>Вступ:</b> Закон Деметри, також відомий як принцип найменшого знання, є правилом в об'єктно-орієнтованому проектуванні, яке обмежує взаємодію об'єктів, щоб зменшити залежності та підвищити модульність системи.</p><ul><li><b>Визначення:</b> закон Деметри стверджує, що об'єкт повинен взаємодіяти тільки з:</li><ul><li>Своїми власними методами і полями.</li><li>Об'єктами, які передані йому як параметри.</li><li>Об'єктами, створеними ним самим.</li><li>Глобальними змінними, доступними у межах його контексту.</li></ul><li><b>Основна ідея:</b> об'єкти не повинні \"знати\" внутрішню структуру інших об'єктів, щоб уникнути складних залежностей.</li><li><b>Переваги:</b></li><ul><li><b>Зменшення зв'язаності:</b> знижує кількість залежностей між об'єктами.</li><li><b>Підвищення модульності:</b> дозволяє легко змінювати окремі компоненти системи без впливу на інші.</li><li><b>Полегшення тестування:</b> зменшення взаємодій спрощує написання і підтримку тестів.</li></ul><li><b>Недоліки:</b></li><ul><li>Може призводити до написання великої кількості методів-посередників, що підвищує складність коду.</li></ul><li><b>Приклад:</b></li><ul><li><b>Порушення:</b> якщо об'єкт А отримує доступ до методу об'єкта Б через об'єкт С (наприклад, `a.getB().getC().doSomething()`).</li><li><b>Дотримання:</b> об'єкт А викликає метод `doSomething()` безпосередньо на об'єкті Б, а Б сам вирішує, як працювати з об'єктом С.</li></ul></ul><h3>Висновок:</h3><p>Закон Деметри допомагає зменшити складність і залежності в системі, покращуючи модульність і підтримуваність коду, але його реалізація вимагає обережності, щоб уникнути надмірного ускладнення.</p>"
        },
        {
            "id": 45,
            "question": "Дати визначення та описати реляційні таблиці",
            "answer": "<h2>Дати визначення та описати реляційні таблиці</h2><p><b>Вступ:</b> Реляційні таблиці є основним елементом реляційної моделі баз даних. Вони використовуються для організації, зберігання і маніпуляції даними в системах управління базами даних.</p><ul><li><b>Визначення:</b> реляційна таблиця — це двовимірна структура, що складається з рядків і стовпців, де кожен рядок відповідає окремому запису (туплу), а стовпець — атрибуту запису.</li><li><b>Основні елементи таблиці:</b></li><ul><li><b>Рядки (Records):</b> містять окремі записи з даними.</li><li><b>Стовпці (Fields):</b> визначають атрибути, які характеризують дані.</li><li><b>Ключі:</b> унікальні ідентифікатори записів у таблиці.</li></ul><li><b>Типи ключів:</b></li><ul><li><b>Первинний ключ (Primary Key):</b> унікально ідентифікує кожен запис.</li><li><b>Зовнішній ключ (Foreign Key):</b> забезпечує зв’язки між таблицями.</li></ul><li><b>Властивості реляційних таблиць:</b></li><ul><li>Кожен стовпець має унікальне ім’я і визначений тип даних.</li><li>Кожен рядок є унікальним (гарантується первинним ключем).</li><li>Порядок рядків і стовпців не впливає на дані.</li></ul><li><b>Переваги:</b></li><ul><li>Простота в розумінні та використанні.</li><li>Ефективне управління великими обсягами даних.</li><li>Можливість встановлення зв’язків між таблицями через ключі.</li></ul><li><b>Недоліки:</b></li><ul><li>Великі дані можуть призводити до складних запитів.</li><li>Залежність від проектування: неефективна структура може знижувати продуктивність.</li></ul><li><b>Приклади використання:</b> управління клієнтами (CRM), управління запасами, облік фінансів.</li></ul><h3>Висновок:</h3><p>Реляційні таблиці є основою організації даних у реляційних базах, забезпечуючи ефективне зберігання, доступ і маніпуляцію інформацією, але їх ефективність залежить від правильного проектування і налаштування.</p>"
        },
        {
            "id": 46,
            "question": "Дати визначення та описати рівень постійних об'єктів бази даних",
            "answer": "<h2>Дати визначення та описати рівень постійних об'єктів бази даних</h2><p><b>Вступ:</b> Рівень постійних об'єктів бази даних визначає, як дані зберігаються та управляються на фізичному рівні в базі даних. Цей рівень відповідає за довготривале збереження інформації, забезпечуючи доступність і узгодженість даних.</p><ul><li><b>Визначення:</b> рівень постійних об'єктів бази даних — це компонент бази даних, який займається фізичним зберіганням даних, індексів, структур таблиць і метаданих у вигляді файлів або блоків на диску.</li><li><b>Основні елементи:</b></li><ul><li><b>Таблиці:</b> зберігають записи даних у структурованому вигляді.</li><li><b>Індекси:</b> прискорюють доступ до даних шляхом організації швидкого пошуку.</li><li><b>Зв’язки:</b> визначають залежності між даними через первинні та зовнішні ключі.</li><li><b>Тригери:</b> автоматизовані дії, що виконуються у відповідь на події в базі даних.</li><li><b>Збережені процедури:</b> логіка, яка виконується безпосередньо в базі даних для автоматизації завдань.</li></ul><li><b>Функції рівня постійних об'єктів:</b></li><ul><li>Забезпечення довготривалого зберігання даних.</li><li>Підтримка узгодженості і цілісності даних.</li><li>Оптимізація доступу до великих обсягів даних.</li></ul><li><b>Приклади реалізації:</b></li><ul><li>Файли баз даних у системах MySQL, PostgreSQL, Oracle.</li><li>Індексація за допомогою B-дерев чи хеш-таблиць.</li><li>Збережені процедури для обробки транзакцій.</li></ul><li><b>Переваги:</b></li><ul><li>Гарантує надійність збереження даних.</li><li>Підвищує продуктивність системи через оптимізацію запитів.</li><li>Забезпечує можливість відновлення даних у разі аварій.</li></ul><li><b>Недоліки:</b></li><ul><li>Складність у налаштуванні та управлінні великими базами даних.</li><li>Можливе зниження продуктивності при неправильному проектуванні.</li></ul></ul><h3>Висновок:</h3><p>Рівень постійних об'єктів бази даних є основою для зберігання і управління даними, забезпечуючи їхню доступність, узгодженість і довготривалу збереженість. Його ефективність залежить від оптимального проектування і налаштування.</p>"
        },
        {
            "id": 47,
            "question": "Дати визначення та описати, як відбувається реалізація Web-додатків",
            "answer": "<h2>Дати визначення та описати, як відбувається реалізація Web-додатків</h2><p><b>Вступ:</b> Реалізація Web-додатків охоплює процеси створення, тестування та розгортання програм, які працюють у веб-браузері, використовуючи клієнт-серверну архітектуру. Web-додатки забезпечують інтерактивний доступ до даних і функцій через інтернет.</p><ul><li><b>Визначення:</b> Web-додатки — це програмні рішення, які виконуються у веб-браузері і взаємодіють із сервером через інтернет або іншу мережу.</li><li><b>Етапи реалізації:</b></li><ul><li><b>1. Аналіз вимог:</b> визначення цілей, функціональних і нефункціональних вимог до додатку.</li><li><b>2. Проектування:</b> створення архітектури додатку, вибір стеку технологій (Frontend: HTML, CSS, JavaScript; Backend: Node.js, Python, PHP тощо; База даних: MySQL, MongoDB).</li><li><b>3. Реалізація Frontend:</b> розробка інтерфейсу користувача з використанням HTML, CSS і фреймворків, таких як React, Angular або Vue.js.</li><li><b>4. Реалізація Backend:</b> написання серверної логіки, реалізація API, управління базою даних і забезпечення безпеки.</li><li><b>5. Тестування:</b> перевірка роботи Frontend і Backend, функціонального і нефункціонального тестування, тестування на різних пристроях і браузерах.</li><li><b>6. Розгортання:</b> розміщення додатку на веб-сервері (наприклад, AWS, Heroku, Vercel) і налаштування домену.</li><li><b>7. Підтримка та оновлення:</b> внесення змін, додавання нових функцій і забезпечення безперебійної роботи додатку.</li></ul><li><b>Інструменти:</b> Git для управління версіями, CI/CD для автоматизації розгортання, Docker для контейнеризації, Postman для тестування API.</li><li><b>Переваги Web-додатків:</b></li><ul><li>Доступність з будь-якого пристрою з інтернетом.</li><li>Автоматичне оновлення без необхідності завантаження нових версій.</li><li>Легка інтеграція з іншими сервісами через API.</li></ul><li><b>Недоліки:</b></li><ul><li>Залежність від інтернет-з'єднання.</li><li>Проблеми продуктивності на низькошвидкісних з'єднаннях.</li></ul></ul><h3>Висновок:</h3><p>Реалізація Web-додатків є складним і багатогранним процесом, який включає аналіз, проектування, розробку і підтримку. Успішний Web-додаток залежить від якісного виконання всіх етапів і використання сучасних технологій.</p>"
        },
        {
            "id": 48,
            "question": "Дати визначення та описати рівні BCED",
            "answer": "<h2>Дати визначення та описати рівні BCED</h2><p><b>Вступ:</b> Рівні BCED (Boundary, Control, Entity, Database) — це концепція, яка використовується для моделювання структури системи, зокрема в об'єктно-орієнтованому проектуванні. Вона визначає типи об'єктів і їхні взаємодії в межах системи.</p><ul><li><b>Визначення:</b> рівні BCED поділяють об'єкти системи на чотири категорії:</li><ul><li><b>Boundary (Межовий рівень):</b> об'єкти, що забезпечують взаємодію користувачів із системою (наприклад, форми, інтерфейси, API).</li><li><b>Control (Контрольний рівень):</b> об'єкти, що керують потоком виконання операцій і взаємодією між Boundary і Entity.</li><li><b>Entity (Сутності):</b> об'єкти, що представляють дані та бізнес-логіку (наприклад, клієнт, продукт).</li><li><b>Database (База даних):</b> об'єкти або механізми, що забезпечують зберігання даних (таблиці, запити, зв’язки).</li></ul><li><b>Роль кожного рівня:</b></li><ul><li><b>Boundary:</b> відповідає за введення і виведення даних; забезпечує зв’язок із користувачем або іншими системами.</li><li><b>Control:</b> управляє логікою процесів, координує виклики методів Boundary і Entity.</li><li><b>Entity:</b> містить бізнес-дані та методи для роботи з ними; реалізує основну функціональність системи.</li><li><b>Database:</b> забезпечує довготривале зберігання і доступ до даних; виконує запити, індексацію і транзакції.</li></ul><li><b>Взаємодія рівнів:</b> Boundary обмінюється даними з Control, Control взаємодіє з Entity і Database для виконання завдань.</li><li><b>Переваги підходу BCED:</b></li><ul><li>Розділення відповідальностей підвищує модульність і гнучкість системи.</li><li>Полегшує тестування і підтримку окремих компонентів.</li><li>Забезпечує чітке розмежування між логікою, даними і інтерфейсом.</li></ul><li><b>Недоліки:</b></li><ul><li>Складність реалізації у великих системах.</li><li>Потребує ретельного проектування для забезпечення ефективної взаємодії рівнів.</li></ul></ul><h3>Висновок:</h3><p>Рівні BCED забезпечують структурований підхід до розробки систем, сприяючи модульності, повторному використанню і підтримці коду. Вони дозволяють чітко визначити ролі і відповідальності кожного компонента в архітектурі системи.</p>"
        },
        {
            "id": 49,
            "question": "Реінжинирінг бізнес-процесів (BPR) проводить ясне розходження між бізнес-процесом і бізнес-функцією. У чому полягає це розходження?",
            "answer": "<h2>Реінжиніринг бізнес-процесів (BPR) проводить ясне розходження між бізнес-процесом і бізнес-функцією. У чому полягає це розходження?</h2><p><b>Вступ:</b> Реінжиніринг бізнес-процесів (BPR) є підходом до радикальної перебудови бізнесу для досягнення значного покращення ключових показників. Він робить акцент на відмінності між бізнес-процесами і бізнес-функціями.</p><ul><li><b>Бізнес-процес:</b> це сукупність взаємопов’язаних дій або задач, спрямованих на досягнення конкретного результату для клієнта або організації. Приклади: обробка замовлення, управління логістикою.</li><ul><li><b>Характеристики:</b> орієнтований на результат, охоплює кілька функцій або відділів, має початок і кінець.</li></ul><li><b>Бізнес-функція:</b> це набір спеціалізованих завдань, які виконуються в межах певного відділу або ролі. Приклади: бухгалтерський облік, маркетинг, управління персоналом.</li><ul><li><b>Характеристики:</b> орієнтована на виконання конкретної спеціалізованої діяльності, зазвичай обмежена одним відділом.</li></ul><li><b>Основні відмінності:</b></li><ul><li><b>Орієнтація:</b> бізнес-процеси орієнтовані на результат, а бізнес-функції — на виконання завдань.</li><li><b>Межі:</b> процеси охоплюють кілька функцій і відділів, функції зазвичай обмежені одним відділом.</li><li><b>Ціль:</b> процеси фокусуються на клієнті і результаті, функції — на спеціалізованій діяльності.</li></ul><li><b>Роль у BPR:</b></li><ul><li>BPR прагне оптимізувати або замінити бізнес-процеси, що включають кілька функцій, для досягнення більшої ефективності та узгодженості.</li><li>Фокус на процесах дозволяє усунути дублювання зусиль і розриви між функціями.</li></ul></ul><h3>Висновок:</h3><p>Розрізнення між бізнес-процесами і бізнес-функціями є ключовим для ефективного реінжинірингу. Бізнес-процеси охоплюють взаємодію між функціями, тоді як функції зосереджені на спеціалізованих завданнях. Зосередження на процесах дозволяє підвищити ефективність і забезпечити досягнення стратегічних цілей організації.</p>"
        },
        {
            "id": 50,
            "question": "Описати, як відбувається виявлення вимог при розробці ПС",
            "answer": "<h2>Описати, як відбувається виявлення вимог при розробці ПС</h2><p><b>Вступ:</b> Виявлення вимог — це початковий етап розробки програмного забезпечення, який спрямований на збір, аналіз і формалізацію вимог користувачів і зацікавлених сторін. Він забезпечує основу для проектування і розробки системи.</p><ul><li><b>Етапи виявлення вимог:</b></li><ul><li><b>1. Аналіз зацікавлених сторін:</b> ідентифікація користувачів, замовників, менеджерів і всіх учасників, які впливають на вимоги.</li><li><b>2. Збір вимог:</b> використання методів, таких як інтерв’ю, анкетування, фокус-групи, аналіз документації і спостереження.</li><li><b>3. Аналіз і уточнення:</b> перевірка зібраних вимог на повноту, узгодженість і реалізовуваність.</li><li><b>4. Категоризація:</b> поділ вимог на функціональні (що система повинна робити) і нефункціональні (як система повинна це робити).</li><li><b>5. Пріоритизація:</b> визначення важливості кожної вимоги для оптимізації розробки.</li><li><b>6. Документування:</b> створення формалізованого документа вимог (SRS — Software Requirements Specification).</li></ul><li><b>Методи виявлення:</b></li><ul><li>Інтерв’ю: глибоке обговорення потреб із зацікавленими сторонами.</li><li>Спостереження: аналіз існуючих процесів у реальних умовах.</li><li>Анкетування: отримання масової інформації через опитувальники.</li><li>Фокус-групи: колективне обговорення потреб користувачів.</li><li>Прототипування: створення початкової версії продукту для збору зворотного зв’язку.</li></ul><li><b>Проблеми та виклики:</b></li><ul><li>Неповні або суперечливі вимоги.</li><li>Зміна вимог під час розробки.</li><li>Складність комунікації між командами.</li></ul></ul><h3>Висновок:</h3><p>Виявлення вимог є критичним етапом розробки програмного забезпечення, який забезпечує чітке розуміння потреб і очікувань замовників. Якісне виконання цього етапу мінімізує ризики і сприяє успішній реалізації проекту.</p>"
        },
        {
            "id": 51,
            "question": "Описати, як відбувається відображення об'єктів у базу даних",
            "answer": "<h2>Описати, як відбувається відображення об'єктів у базу даних</h2><p><b>Вступ:</b> Відображення об'єктів у базу даних (Object-Relational Mapping, ORM) — це процес перетворення об'єктів у коді на записи у базі даних і навпаки. Це дозволяє розробникам працювати з даними, використовуючи об'єктно-орієнтовані концепції, а не низькорівневі SQL-запити.</p><ul><li><b>Основні кроки відображення:</b></li><ul><li><b>1. Мапування класів:</b> кожен клас у коді відповідає таблиці в базі даних.</li><li><b>2. Мапування атрибутів:</b> властивості класу відображаються на колонки таблиці.</li><li><b>3. Визначення первинного ключа:</b> створення унікального ідентифікатора для кожного об'єкта (зазвичай `id`).</li><li><b>4. Визначення зв’язків:</b> мапування асоціацій між класами, таких як \"один до одного\", \"один до багатьох\" або \"багато до багатьох\".</li><li><b>5. Створення схем:</b> автоматична генерація або налаштування SQL-схем відповідно до класів.</li></ul><li><b>Інструменти ORM:</b> популярні бібліотеки та фреймворки, такі як Hibernate (Java), SQLAlchemy (Python), Entity Framework (.NET), Sequelize (Node.js).</li><li><b>Переваги:</b></li><ul><li>Спрощення роботи з базами даних через об'єктно-орієнтовану модель.</li><li>Автоматизація процесів перетворення даних.</li><li>Підвищення продуктивності розробки.</li></ul><li><b>Недоліки:</b></li><ul><li>Можливе зниження продуктивності для складних запитів.</li><li>Залежність від конкретної ORM-бібліотеки.</li><li>Складність налаштування для нестандартних структур баз даних.</li></ul><li><b>Приклади:</b></li><ul><li>Клас `User` із властивостями `id`, `name`, `email` відображається на таблицю `users` з колонками `id`, `name`, `email`.</li><li>Відносини між класами, наприклад, `User` має багато `Posts`, реалізуються через зовнішні ключі.</li></ul></ul><h3>Висновок:</h3><p>Відображення об'єктів у базу даних (ORM) спрощує взаємодію з даними, забезпечуючи інтеграцію між об'єктно-орієнтованим кодом і реляційною базою даних. Це дозволяє розробникам працювати на високому рівні абстракції, не втрачаючи доступу до функціональності бази даних.</p>"
        },
        {
            "id": 52,
            "question": "Описати, як відбувається тестування відносно специфікації",
            "answer": "<h2>Описати, як відбувається тестування відносно специфікації</h2><p><b>Вступ:</b> Тестування відносно специфікації (Specification-Based Testing) — це метод, який використовує специфікацію вимог як основу для створення тестових випадків. Цей підхід забезпечує перевірку того, що програмне забезпечення відповідає задекларованим функціональним і нефункціональним вимогам.</p><ul><li><b>Основні етапи тестування:</b></li><ul><li><b>1. Аналіз специфікації:</b> детальне вивчення документа вимог (SRS) для розуміння функціональності та очікуваної поведінки системи.</li><li><b>2. Розробка тестових випадків:</b> створення тестових сценаріїв, які покривають всі вимоги, описані в специфікації.</li><li><b>3. Виконання тестування:</b> запуск тестів вручну або за допомогою автоматизованих інструментів, щоб перевірити, чи відповідає система вимогам.</li><li><b>4. Аналіз результатів:</b> порівняння фактичної поведінки системи з очікуваною.</li><li><b>5. Виправлення помилок:</b> у разі виявлення розбіжностей розробники вносять необхідні корективи в код.</li></ul><li><b>Методи тестування:</b></li><ul><li><b>Тестування чорного ящика:</b> перевіряється відповідність поведінки системи вимогам без урахування внутрішньої реалізації.</li><li><b>Функціональне тестування:</b> фокус на функціях, описаних у специфікації.</li><li><b>Нефункціональне тестування:</b> перевірка продуктивності, безпеки, масштабованості та інших характеристик.</li></ul><li><b>Інструменти:</b> JIRA, TestRail для управління тестами; Selenium, JUnit, Postman для автоматизації.</li><li><b>Переваги:</b></li><ul><li>Забезпечує повне покриття вимог.</li><li>Мінімізує ризик пропущених функцій або некоректної поведінки.</li><li>Полегшує виявлення помилок на ранніх етапах.</li></ul><li><b>Недоліки:</b></li><ul><li>Залежність від якості специфікації: нечітко описані вимоги можуть призвести до проблем у тестуванні.</li><li>Часозатратність на створення і підтримку тестів.</li></ul></ul><h3>Висновок:</h3><p>Тестування відносно специфікації є ключовим підходом для забезпечення якості програмного забезпечення. Воно дозволяє перевірити відповідність продукту вимогам замовника, зменшити кількість помилок і підвищити задоволеність користувачів.</p>"
        },
        {
            "id": 53,
            "question": "Дати визначення та описати триланковій архітектурі",
            "answer": "<h2>Дати визначення та описати триланкову архітектуру</h2><p><b>Вступ:</b> Триланкова архітектура (Three-Tier Architecture) — це модель організації програмного забезпечення, яка поділяє систему на три окремі рівні: презентації, логіки та даних. Це забезпечує модульність, масштабованість і легкість у підтримці системи.</p><ul><li><b>Визначення:</b> триланкова архітектура — це структура програмного забезпечення, яка розподіляє функції між трьома рівнями:</li><ul><li><b>1. Рівень презентації (Presentation Layer):</b> відповідає за взаємодію з користувачем, обробку вводу та відображення результатів. Наприклад, веб-інтерфейс або мобільний додаток.</li><li><b>2. Рівень логіки (Business Logic Layer):</b> містить бізнес-логіку програми, реалізує правила і процеси. Приклад: сервер додатка, API.</li><li><b>3. Рівень даних (Data Layer):</b> займається збереженням і управлінням даними, взаємодіє з базою даних або іншими системами зберігання.</li></ul><li><b>Особливості:</b></li><ul><li>Чітке розмежування відповідальностей між рівнями.</li><li>Можливість незалежного оновлення або заміни кожного рівня.</li></ul><li><b>Переваги:</b></li><ul><li><b>Масштабованість:</b> легко додавати нові функції або масштабувати окремі рівні.</li><li><b>Повторне використання:</b> компоненти можуть використовуватися в інших системах.</li><li><b>Зручність у підтримці:</b> спрощується відлагодження і внесення змін.</li></ul><li><b>Недоліки:</b></li><ul><li>Підвищена складність через розділення функцій.</li><li>Можливі затримки через взаємодію між рівнями.</li></ul><li><b>Приклади:</b></li><ul><li>Веб-додатки: HTML/JS на клієнті (Presentation), REST API на сервері (Business Logic), SQL-база даних (Data).</li><li>Мобільні додатки: інтерфейс у додатку, серверний API, база даних на сервері.</li></ul></ul><h3>Висновок:</h3><p>Триланкова архітектура забезпечує модульність, гнучкість і масштабованість системи, дозволяючи окремо розвивати кожен рівень. Це особливо корисно для сучасних складних додатків і систем з великим навантаженням.</p>"
        },
        {
            "id": 54,
            "question": "Дати визначення та описати традиційні методи виявлення вимог",
            "answer": "<h2>Дати визначення та описати традиційні методи виявлення вимог</h2><p><b>Вступ:</b> Виявлення вимог — це процес збору інформації про очікування та потреби користувачів щодо програмного забезпечення. Традиційні методи виявлення вимог допомагають створити чітке уявлення про функціональність системи.</p><ul><li><b>Визначення:</b> традиційні методи виявлення вимог включають техніки збору даних, які фокусуються на безпосередньому спілкуванні з користувачами та аналізі їхньої діяльності.</li><li><b>Основні методи:</b></li><ul><li><b>1. Інтерв’ю:</b> персональні або групові зустрічі з користувачами і зацікавленими сторонами для збору інформації про їхні потреби.</li><ul><li><b>Переваги:</b> дозволяє отримати детальну інформацію, можливість уточнень у реальному часі.</li><li><b>Недоліки:</b> потребує багато часу, залежить від компетенції опитувача.</li></ul><li><b>2. Анкетування:</b> використання опитувальників для збору вимог у великої кількості користувачів.</li><ul><li><b>Переваги:</b> швидкість збору даних, зручність для масових опитувань.</li><li><b>Недоліки:</b> обмежена можливість уточнень, залежність від якості формулювання питань.</li></ul><li><b>3. Спостереження:</b> вивчення реальних процесів роботи користувачів для розуміння їхніх потреб.</li><ul><li><b>Переваги:</b> дозволяє побачити реальні проблеми та потреби.</li><li><b>Недоліки:</b> залежить від кваліфікації спостерігача, можливі витрати часу.</li></ul><li><b>4. Аналіз документації:</b> вивчення існуючих документів, звітів і систем для визначення вимог.</li><ul><li><b>Переваги:</b> доступ до історичних даних, забезпечення базового розуміння системи.</li><li><b>Недоліки:</b> може бути застарілою або неповною.</li></ul><li><b>5. Проведення семінарів:</b> колективні обговорення з користувачами для виявлення і пріоритизації вимог.</li><ul><li><b>Переваги:</b> забезпечує активну взаємодію, сприяє узгодженню вимог.</li><li><b>Недоліки:</b> залежить від ефективності модератора, може бути складно організувати.</li></ul></ul><li><b>Переваги традиційних методів:</b></li><ul><li>Дозволяють отримати вимоги безпосередньо від користувачів.</li><li>Мають низький поріг для впровадження.</li></ul><li><b>Недоліки:</b></li><ul><li>Залежать від суб’єктивності учасників.</li><li>Потребують значних витрат часу і ресурсів.</li></ul></ul><h3>Висновок:</h3><p>Традиційні методи виявлення вимог забезпечують безпосередню взаємодію з користувачами і зацікавленими сторонами, що дозволяє зібрати інформацію про їхні потреби. Вибір конкретного методу залежить від специфіки проекту, ресурсів і цілей.</p>"
        },
        {
            "id": 55,
            "question": "Дати визначення та описати комплексний підхід",
            "answer": "<h2>Дати визначення та описати комплексний підхід</h2><p><b>Вступ:</b> Комплексний підхід — це методологія, яка об’єднує кілька взаємопов’язаних підходів, методів та інструментів для вирішення складних задач і досягнення цілей у межах єдиної системи. Він орієнтований на врахування всіх аспектів проблеми.</p><ul><li><b>Визначення:</b> комплексний підхід — це системний спосіб організації процесів, який враховує всі важливі аспекти проблеми або проекту, поєднуючи різні методи та інструменти для досягнення максимально ефективного результату.</li><li><b>Основні характеристики:</b></li><ul><li><b>Системність:</b> розгляд проблеми як єдиного цілого з урахуванням усіх її компонентів і взаємозв’язків.</li><li><b>Мультидисциплінарність:</b> використання знань і методів із різних галузей для аналізу та вирішення задач.</li><li><b>Гнучкість:</b> можливість адаптації підхід до змін середовища або вимог.</li><li><b>Ітеративність:</b> поетапне виконання процесів з постійним аналізом і вдосконаленням.</li></ul><li><b>Застосування:</b></li><ul><li>Управління проектами.</li><li>Розробка програмного забезпечення.</li><li>Аналіз бізнес-процесів.</li><li>Маркетинг і стратегічне планування.</li></ul><li><b>Переваги:</b></li><ul><li>Дозволяє враховувати всі аспекти проблеми.</li><li>Забезпечує ефективну взаємодію між командами.</li><li>Знижує ризики через всебічний аналіз.</li></ul><li><b>Недоліки:</b></li><ul><li>Може бути ресурсозатратним.</li><li>Складність впровадження у великих системах.</li></ul></ul><h3>Висновок:</h3><p>Комплексний підхід є універсальним інструментом для вирішення складних задач. Його використання дозволяє враховувати всі аспекти проблеми, забезпечуючи ефективне і гармонійне виконання завдань, але вимагає ретельного планування і координації.</p>"
        },
        {
            "id": 56,
            "question": "Коротко опишіть види блокувань при песимістичному керуванні паралельністю",
            "answer": "<h2>Коротко опишіть види блокувань при песимістичному керуванні паралельністю</h2><p><b>Вступ:</b> Песимістичне керування паралельністю застосовує блокування для запобігання конфліктам між транзакціями при одночасному доступі до даних. Це забезпечує узгодженість і цілісність даних.</p><ul><li><b>Ексклюзивне блокування (Exclusive Lock):</b> дозволяє доступ до ресурсу тільки одній транзакції, забороняючи читання і запис іншим.</li><li><b>Поділюване блокування (Shared Lock):</b> дозволяє кільком транзакціям одночасно читати ресурс, але блокує запис.</li><li><b>Блокування з намірами (Intent Lock):</b> інформує систему про намір транзакції встановити більш детальне блокування, запобігаючи конфліктам на рівнях таблиць і рядків.</li><li><b>Читання-запис блокування (Read-Write Lock):</b> розділяє доступ до ресурсу для операцій читання і запису, зменшуючи конфлікти.</li><li><b>Рекурсивне блокування (Recursive Lock):</b> дозволяє одному процесу кілька разів блокувати той самий ресурс без взаємоблокування.</li></ul><h3>Висновок:</h3><p>Блокування при песимістичному керуванні паралельністю забезпечують узгодженість даних, але можуть впливати на продуктивність через затримки, пов'язані з очікуванням звільнення ресурсів.</p>"
        },
        {
            "id": 57,
            "question": "Коротко опишіть п'ять рівнів SQL-інтерфейсів",
            "answer": "<h2>Коротко опишіть п'ять рівнів SQL-інтерфейсів</h2><p><b>Вступ:</b> SQL-інтерфейси забезпечують взаємодію користувачів і програм із базами даних. Вони поділяються на різні рівні залежно від функціональних можливостей і складності використання.</p><ul><li><b>1. Інтерактивний рівень:</b> використання SQL-запитів у ручному режимі через інструменти, такі як консоль бази даних або GUI клієнти (наприклад, pgAdmin, MySQL Workbench).</li><li><b>2. Програмний рівень:</b> інтеграція SQL-запитів у код додатків за допомогою API, таких як JDBC (Java Database Connectivity) або ODBC (Open Database Connectivity).</li><li><b>3. Адміністративний рівень:</b> виконання SQL-запитів для управління базами даних, включаючи створення таблиць, управління користувачами, резервне копіювання і налаштування.</li><li><b>4. Вбудований рівень:</b> використання SQL-операторів безпосередньо в мовах програмування через вбудовані інструкції (наприклад, PL/SQL у Oracle, T-SQL у Microsoft SQL Server).</li><li><b>5. Рівень збережених процедур:</b> створення і виконання складних процедур і функцій на стороні сервера, які об'єднують SQL-запити з бізнес-логікою.</li></ul><h3>Висновок:</h3><p>П’ять рівнів SQL-інтерфейсів забезпечують широкий спектр можливостей для роботи з базами даних, від інтерактивних запитів до інтеграції з програмами і автоматизації бізнес-логіки.</p>"
        },
        {
            "id": 58,
            "question": "Дати визначення та описати архітектуру програмного забезпечення",
            "answer": "<h2>Дати визначення та описати архітектуру програмного забезпечення</h2><p><b>Вступ:</b> Архітектура програмного забезпечення — це високорівнева структура системи, яка визначає її компоненти, їхні функції, взаємодії та принципи, що керують проектуванням і розвитком системи.</p><ul><li><b>Визначення:</b> архітектура програмного забезпечення — це опис структури системи, включаючи її компоненти, їхні взаємодії, а також керівні принципи і стандарти для її створення.</li><li><b>Основні елементи:</b></li><ul><li><b>Компоненти:</b> окремі функціональні частини системи, наприклад, модулі, сервіси або об’єкти.</li><li><b>Зв’язки:</b> способи взаємодії між компонентами, такі як API, події або повідомлення.</li><li><b>Стилі архітектури:</b> наприклад, монолітна, клієнт-серверна, мікросервісна, подійно-орієнтована.</li><li><b>Нефункціональні характеристики:</b> продуктивність, безпека, масштабованість, надійність тощо.</li></ul><li><b>Принципи проектування архітектури:</b></li><ul><li>Модульність: розділення системи на незалежні модулі.</li><li>Масштабованість: здатність системи рости без зниження продуктивності.</li><li>Відмовостійкість: забезпечення роботи при виникненні збоїв.</li></ul><li><b>Документування архітектури:</b> створення діаграм, специфікацій і описів для візуалізації і передачі ідей розробникам і зацікавленим сторонам.</li></ul><h3>Висновок:</h3><p>Архітектура програмного забезпечення є основою для створення системи, визначаючи її структуру, взаємодії і характеристики, що дозволяє задовольнити вимоги бізнесу і забезпечити її надійність і гнучкість у майбутньому.</p>"
        },
        {
            "id": 59,
            "question": "Дати визначення точці збереження. Як її можна використовувати при проектуванні програми?",
            "answer": "<h2>Дати визначення точці збереження. Як її можна використовувати при проектуванні програми?</h2><p><b>Вступ:</b> Точка збереження (Savepoint) — це механізм управління транзакціями в базах даних, який дозволяє створити проміжні точки, до яких можна повернутися без необхідності скасування всієї транзакції.</p><ul><li><b>Визначення:</b> точка збереження — це позначка в межах транзакції, яка дозволяє виконати частковий відкат змін до певного моменту, не впливаючи на попередні операції в межах тієї ж транзакції.</li><li><b>Використання:</b></li><ul><li><b>1. Створення точки збереження:</b> за допомогою SQL-команди `SAVEPOINT`. Наприклад, `SAVEPOINT sp1` створює точку збереження з назвою `sp1`.</li><li><b>2. Відкат до точки збереження:</b> за допомогою команди `ROLLBACK TO SAVEPOINT`. Наприклад, `ROLLBACK TO sp1` скасує всі зміни після створення точки `sp1`, залишаючи попередні операції транзакції недоторканими.</li><li><b>3. Видалення точки збереження:</b> за допомогою команди `RELEASE SAVEPOINT`. Це дозволяє очистити ресурси, пов'язані з точкою збереження.</li></ul><li><b>Переваги:</b></li><ul><li>Дозволяє мінімізувати втрати при виникненні помилок у транзакції.</li><li>Підвищує гнучкість управління транзакціями.</li><li>Забезпечує безпеку даних під час складних операцій.</li></ul><li><b>Приклади використання:</b></li><ul><li>У складних обчисленнях, де частини транзакції можна перевірити на коректність до завершення всієї транзакції.</li><li>У системах резервування, де користувач може змінити свою дію, не скасовуючи всього процесу.</li></ul></ul><h3>Висновок:</h3><p>Точки збереження забезпечують гнучке управління транзакціями і дозволяють локально відновлювати стан без необхідності скасовувати всі операції. Це робить їх корисним інструментом для підвищення стабільності та надійності програмного забезпечення.</p>"
        },
        {
            "id": 60,
            "question": "Дати визначення відношенню з'єднання",
            "answer": "<h2>Дати визначення відношенню з'єднання</h2><p><b>Вступ:</b> Відношення з'єднання (Join) є базовою операцією реляційної алгебри, яка дозволяє поєднувати дані з двох або більше таблиць на основі пов’язаних атрибутів. Це ключовий механізм для отримання пов'язаної інформації в реляційних базах даних.</p><ul><li><b>Визначення:</b> відношення з'єднання — це операція в SQL, яка комбінує записи з двох таблиць, використовуючи певну умову з’єднання. Зазвичай умовою є рівність значень у відповідних стовпцях (ключах).</li><li><b>Типи з'єднань:</b></li><ul><li><b>INNER JOIN:</b> повертає записи, які мають відповідність в обох таблицях.</li><li><b>LEFT JOIN (LEFT OUTER JOIN):</b> повертає всі записи з лівої таблиці і відповідні записи з правої таблиці, якщо такі є.</li><li><b>RIGHT JOIN (RIGHT OUTER JOIN):</b> повертає всі записи з правої таблиці і відповідні записи з лівої таблиці, якщо такі є.</li><li><b>FULL JOIN (FULL OUTER JOIN):</b> повертає всі записи з обох таблиць, незалежно від наявності відповідностей.</li><li><b>CROSS JOIN:</b> виконує декартовий добуток записів двох таблиць.</li><li><b>SELF JOIN:</b> з’єднання таблиці самої з собою.</li></ul><li><b>Приклад SQL-запиту:</b></li><ul><li><b>INNER JOIN:</b> `SELECT orders.id, customers.name FROM orders INNER JOIN customers ON orders.customer_id = customers.id;`</li><li><b>LEFT JOIN:</b> `SELECT employees.id, employees.name, departments.name FROM employees LEFT JOIN departments ON employees.dept_id = departments.id;`</li></ul><li><b>Переваги:</b></li><ul><li>Дозволяє працювати з нормалізованими базами даних.</li><li>Підвищує ефективність доступу до пов'язаних даних.</li><li>Забезпечує цілісність даних у реляційній моделі.</li></ul><li><b>Недоліки:</b></li><ul><li>Можливість помилок при неправильно налаштованих умовах з’єднання.</li><li>Складність у розумінні для великих і складних запитів.</li></ul></ul><h3>Висновок:</h3><p>Відношення з'єднання є важливою операцією в реляційних базах даних, яка забезпечує ефективний доступ до пов'язаних даних, але вимагає уважного налаштування для запобігання помилкам і оптимізації продуктивності.</p>"
        },
        {
            "id": 61,
            "question": "Дати визначення триланковій архітектурі У чому її переваги і недоліки?",
            "answer": "<h2>Дати визначення триланковій архітектурі. У чому її переваги і недоліки?</h2><p><b>Вступ:</b> Триланкова архітектура (Three-Tier Architecture) — це архітектурний підхід, що розділяє програму на три рівні: презентації, логіки та даних. Це сприяє модульності, гнучкості й масштабованості системи.</p><ul><li><b>Визначення:</b> триланкова архітектура — це структура програмного забезпечення, яка поділяє функції між трьома рівнями:</li><ul><li><b>1. Рівень презентації (Presentation Layer):</b> відповідає за взаємодію з користувачем (веб-інтерфейс, мобільний додаток).</li><li><b>2. Рівень логіки (Business Logic Layer):</b> реалізує бізнес-правила й логіку роботи системи (серверна частина, API).</li><li><b>3. Рівень даних (Data Layer):</b> забезпечує зберігання і управління даними (бази даних).</li></ul><li><b>Переваги:</b></li><ul><li><b>1. Модульність:</b> чітке розділення відповідальностей між рівнями дозволяє легко модифікувати кожен із них.</li><li><b>2. Масштабованість:</b> можна масштабувати рівні окремо (наприклад, додати сервери для рівня логіки).</li><li><b>3. Повторне використання:</b> компоненти кожного рівня можуть бути використані в інших проектах.</li><li><b>4. Спрощена підтримка:</b> ізольованість рівнів спрощує налагодження і внесення змін.</li></ul><li><b>Недоліки:</b></li><ul><li><b>1. Ускладненість:</b> вимагає більше часу на проєктування і розробку через поділ на рівні.</li><li><b>2. Продуктивність:</b> взаємодія між рівнями може спричиняти затримки, особливо при високому навантаженні.</li><li><b>3. Витрати:</b> потребує більше ресурсів для обслуговування окремих рівнів.</li></ul><li><b>Приклади:</b></li><ul><li>Веб-додатки: клієнт (HTML/JS) — сервер логіки (Node.js, Python) — база даних (PostgreSQL, MongoDB).</li><li>Мобільні додатки: мобільний інтерфейс — сервер API — база даних.</li></ul></ul><h3>Висновок:</h3><p>Триланкова архітектура є ефективним рішенням для створення модульних і масштабованих систем. Вона спрощує підтримку і розвиток проекту, проте потребує ретельного планування і може ускладнювати початкову розробку.</p>"
        },
        {
            "id": 62,
            "question": "Дати визначення домінантному класу",
            "answer": "<h2>Дати визначення домінантному класу</h2><p><b>Вступ:</b> У об'єктно-орієнтованому проектуванні домінантний клас — це ключовий клас системи, який виконує основні функції та координує взаємодію з іншими класами. Визначення таких класів є важливим для правильної архітектури системи.</p><ul><li><b>Визначення:</b> домінантний клас — це клас, який має центральне значення в системі, відповідає за основну логіку або функціональність і управляє взаємодією з іншими класами через методи або зв’язки.</li><li><b>Основні характеристики:</b></li><ul><li><b>1. Центральна роль:</b> домінантний клас є ядром системи і впливає на її архітектуру.</li><li><b>2. Управління взаємодіями:</b> виконує основні координаційні завдання між іншими класами.</li><li><b>3. Велика кількість залежностей:</b> інші класи системи часто залежать від методів і даних домінантного класу.</li></ul><li><b>Приклади використання:</b></li><ul><li>У системі управління замовленнями клас `Order` може бути домінантним, оскільки він пов'язаний із замовниками, продуктами та статусами.</li><li>У банківській системі клас `Account` є домінантним для транзакцій, балансів і клієнтів.</li></ul><li><b>Переваги:</b></li><ul><li>Забезпечує чітку структуру і централізацію функціональності.</li><li>Полегшує координацію і повторне використання коду.</li></ul><li><b>Недоліки:</b></li><ul><li>Можлива перевантаженість класу, що ускладнює його підтримку.</li><li>Залежність інших класів від домінантного може створювати проблеми при зміні логіки.</li></ul></ul><h3>Висновок:</h3><p>Домінантний клас є центральним елементом об'єктно-орієнтованої системи, що забезпечує її основну функціональність і координує взаємодії. Його правильне визначення та використання сприяє спрощенню архітектури та підвищенню ефективності розробки.</p>"
        },
        {
            "id": 63,
            "question": "Назвати дії можливі у відповідь на відправлений запит на зміни",
            "answer": "<h2>Назвати дії, можливі у відповідь на відправлений запит на зміни</h2><p><b>Вступ:</b> У процесі управління запитами на зміни в програмному забезпеченні або системі можливі різні дії залежно від типу змін, їхньої важливості та впливу на існуючий функціонал. Ці дії спрямовані на забезпечення стабільності та узгодженості системи.</p><ul><li><b>1. Прийняття змін:</b> затвердження запиту на зміну після аналізу його доцільності і впливу на систему.</li><li><b>2. Відхилення змін:</b> відхилення запиту, якщо зміни не виправдовують витрати, суперечать цілям проекту або негативно впливають на систему.</li><li><b>3. Відкладення змін:</b> зміни можуть бути відкладені до наступного етапу розробки через обмеження в часі або ресурсах.</li><li><b>4. Зміна запиту:</b> внесення коректив до самого запиту для його узгодження з вимогами проекту.</li><li><b>5. Розробка плану впровадження:</b> створення детального плану реалізації змін, включаючи етапи, ресурси та часові рамки.</li><li><b>6. Виконання змін:</b> внесення змін до коду, конфігурацій або процесів, відповідно до затвердженого плану.</li><li><b>7. Тестування змін:</b> перевірка реалізованих змін для забезпечення їхньої коректності та узгодженості з вимогами.</li><li><b>8. Внесення змін у документацію:</b> оновлення технічної документації, щоб відобразити внесені зміни.</li><li><b>9. Сповіщення зацікавлених сторін:</b> інформування користувачів, команди або інших зацікавлених сторін про внесені зміни.</li></ul><h3>Висновок:</h3><p>Управління запитами на зміни включає кілька можливих дій, які спрямовані на забезпечення ефективності процесу змін та мінімізацію ризиків для системи. Правильне управління змінами сприяє стабільності та вдосконаленню програмного забезпечення.</p>"
        },
        {
            "id": 64,
            "question": "Назвати, які об'єкти можуть виступати, як цільові об'єкти для повідомлень відповідно до закону Деметра",
            "answer": "<h2>Назвати, які об'єкти можуть виступати як цільові об'єкти для повідомлень відповідно до закону Деметра</h2><p><b>Вступ:</b> Закон Деметри, або принцип найменшого знання, обмежує взаємодію об'єктів, дозволяючи їм спілкуватися тільки з певним колом інших об'єктів. Це допомагає знизити зв'язаність і підвищити модульність коду.</p><ul><li><b>Цільові об'єкти для повідомлень:</b></li><ul><li><b>1. Сам об'єкт:</b> об'єкт може викликати свої власні методи.</li><li><b>2. Атрибути об'єкта:</b> об'єкт може взаємодіяти з іншими об'єктами, які є його прямими атрибутами.</li><li><b>3. Об'єкти, передані як параметри:</b> об'єкт може працювати з об'єктами, які були передані йому в методі або конструкторі.</li><li><b>4. Об'єкти, створені об'єктом:</b> об'єкт може взаємодіяти з об'єктами, які він сам створив.</li><li><b>5. Глобальні або статичні об'єкти:</b> у випадках, коли вони доступні в контексті об'єкта (використання такого підходу має бути обмеженим).</li></ul><li><b>Виключення:</b></li><ul><li>Закон Деметри забороняє взаємодію з \"об'єктами друзів\", які отримані через ланцюжок викликів, наприклад: `a.getB().getC().doSomething()`.</li></ul><li><b>Переваги:</b></li><ul><li>Зменшує залежність між об'єктами.</li><li>Покращує модульність і повторне використання коду.</li><li>Полегшує тестування і підтримку системи.</li></ul><li><b>Недоліки:</b></li><ul><li>Може призводити до надмірної кількості методів-посередників.</li><li>Складність у дотриманні принципу в дуже великих системах.</li></ul></ul><h3>Висновок:</h3><p>Відповідно до закону Деметри, об'єкт повинен взаємодіяти лише з обмеженим колом інших об'єктів: своїми атрибутами, об'єктами, переданими як параметри, або створеними ним самим. Це дозволяє зменшити зв'язаність і підвищити модульність коду.</p>"
        },
        {
            "id": 65,
            "question": "Описати, який вплив на проектування роблять принципи, зв'язані зі зв'язаністю та ув'язуванням",
            "answer": "<h2>Описати, який вплив на проектування роблять принципи, зв'язані зі зв'язаністю та ув'язуванням</h2><p><b>Вступ:</b> Принципи зв'язаності (cohesion) та ув'язування (coupling) є ключовими у проектуванні об'єктно-орієнтованих систем. Вони визначають, як компоненти системи взаємодіють один з одним і наскільки добре організовані їхні внутрішні частини.</p><ul><li><b>Зв'язаність (Cohesion):</b> ступінь, до якої елементи класу або модуля працюють разом для виконання однієї задачі.</li><ul><li><b>Висока зв'язаність:</b> компоненти мають чітко визначену відповідальність і орієнтовані на одну задачу.</li><li><b>Вплив:</b></li><ul><li>Забезпечує легке розуміння коду.</li><li>Покращує повторне використання коду.</li><li>Зменшує ймовірність виникнення помилок.</li></ul></ul><li><b>Ув'язування (Coupling):</b> міра залежності одного модуля від іншого.</li><ul><li><b>Низьке ув'язування:</b> модулі мають мінімальні залежності один від одного.</li><li><b>Вплив:</b></li><ul><li>Підвищує гнучкість системи.</li><li>Полегшує модифікації та тестування.</li><li>Зменшує ризик виникнення каскадних помилок.</li></ul></ul><li><b>Спільний вплив на проектування:</b></li><ul><li>Висока зв'язаність і низьке ув'язування сприяють створенню добре структурованих, модульних і легко підтримуваних систем.</li><li>Проектування повинно враховувати принципи SOLID, щоб забезпечити оптимальну зв'язаність та ув'язування:</li><ul><li><b>Принцип єдиної відповідальності (Single Responsibility Principle):</b> кожен модуль відповідає лише за одну задачу.</li><li><b>Принцип інверсії залежностей (Dependency Inversion Principle):</b> модулі повинні залежати від абстракцій, а не конкретних реалізацій.</li></ul></ul><li><b>Приклади:</b></li><ul><li>Клас із високою зв'язаністю: клас `Invoice` обробляє виключно рахунки (друк, розрахунок суми, збереження).</li><li>Система з низьким ув'язуванням: модулі обробки замовлень і управління користувачами взаємодіють через API, а не напряму.</li></ul></ul><h3>Висновок:</h3><p>Принципи зв'язаності та ув'язування мають критичний вплив на якість проектування системи. Висока зв'язаність і низьке ув'язування сприяють створенню гнучких, модульних і легких у підтримці систем, знижуючи ризики і підвищуючи продуктивність розробки.</p>"
        },
        {
            "id": 66,
            "question": "Назвати розходження між об'єктною і реляційною моделлю БД",
            "answer": ""
        },
        {
            "id": 67,
            "question": "Назвати основні причини зрушення від структурного підходу до обʼєктно-орієнтованого проектування",
            "answer": ""
        },
        {
            "id": 68,
            "question": "Назвати принципи встановлення вимог при розробці ПС",
            "answer": ""
        },
        {
            "id": 69,
            "question": "Назвати, чому розуміння методу ISA (архітектура інформаційної системи) важливо для системної розробки",
            "answer": ""
        },
        {
            "id": 70,
            "question": "Дати визначення PMF та описати кроки",
            "answer": ""
        },
        {
            "id": 71,
            "question": "Дати характеристику технічним та нетехнічним фахівцям, що входять в продуктові ІТ-команди",
            "answer": ""
        },
        {
            "id": 72,
            "question": "Описати алгоритм роботи з ІТ-продуктом",
            "answer": ""
        },
        {
            "id": 73,
            "question": "Описати особливості продуктової команди",
            "answer": ""
        },
        {
            "id": 74,
            "question": "Дати визначення продуктовій стратегії та описати стратегію продукту",
            "answer": ""
        },
        {
            "id": 75,
            "question": "Описати пошук ідеї та розробку MVP",
            "answer": ""
        },
        {
            "id": 76,
            "question": "Дати визначення та описати фреймворк RICE",
            "answer": ""
        },
        {
            "id": 77,
            "question": "Описати роботу з даними в продуктовій аналітиці",
            "answer": ""
        },
        {
            "id": 78,
            "question": "Дати визначення метриці, описати види метрик",
            "answer": ""
        },
        {
            "id": 79,
            "question": "Назвати та описати напрямки маркетингу для стрімінгового бізнесу",
            "answer": ""
        },
        {
            "id": 80,
            "question": "Описати метрики для роботи performance-маркетологів",
            "answer": ""
        },
        {
            "id": 81,
            "question": "Назвати та описати інструменти маркетингу в продуктовому ІТ",
            "answer": ""
        },
        {
            "id": 82,
            "question": "Описати принципи, якими користуються розробники для знаходження та утримування користувачів та продаж",
            "answer": ""
        },
        {
            "id": 83,
            "question": "Описати поведінкову модель Браяна Фога",
            "answer": ""
        },
        {
            "id": 84,
            "question": "Дати визначення дизайну і описати види дизайнерів, які є у продуктових компаніях",
            "answer": ""
        },
        {
            "id": 85,
            "question": "Описати методологію Human Centered Design",
            "answer": ""
        },
        {
            "id": 86,
            "question": "Назвати та писати роботу технічних спеціалістів в продуктових командах",
            "answer": ""
        },
        {
            "id": 87,
            "question": "Назвати та писати етапи розвитку продуктової компанії",
            "answer": ""
        },
        {
            "id": 88,
            "question": "Алгоритм створення та розвитку ІТ-продукту",
            "answer": ""
        }
    ]
}